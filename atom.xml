<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饿狼逐日</title>
  
  <subtitle>起风了，唯有努力活下去；风起了，必须努力活下去</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lzuliuyun.com/"/>
  <updated>2018-07-10T14:47:35.100Z</updated>
  <id>http://lzuliuyun.com/</id>
  
  <author>
    <name>lzuliuyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图片上传</title>
    <link href="http://lzuliuyun.com/2018/07/09/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://lzuliuyun.com/2018/07/09/图片上传/</id>
    <published>2018-07-09T15:15:56.000Z</published>
    <updated>2018-07-10T14:47:35.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>最近在做图片上传功能，使用vue相关技术栈。其中图片上传的需求是，支持多图上传，使用到了<a href="http://vanthink-ued.github.io/vue-core-image-upload/index.html#/cn/home" target="_blank" rel="noopener">vue-core-image-upload</a>插件，该插件的接口非常友好，是一款轻量级的 Vue.js 上传插件，它不仅可以支持的图片的上传，裁剪，压缩，而且也支持在移动端的图片处理，它定义了诸多上传周期，可以自由的进行流程控制。</p><h3 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h3><p>话不多说，贴代码<br>其中inputOfFile是文件的name，如果支持多图上传，其自动变成了name[]，data则是在上传图片时需要额外请求的参数。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"btn-upload"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">vue-core-image-upload</span></span></span><br><span class="line"><span class="tag">            <span class="attr">text</span>=<span class="string">''</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"btn btn-primary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:crop</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">inputOfFile</span>=<span class="string">"image"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">imageuploaded</span>=<span class="string">"imageuploaded"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:max-file-size</span>=<span class="string">"5242880"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:multiple</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:multiple-size</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">url</span>=<span class="string">"/api/image"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">vue-core-image-upload</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另外，图片上传之后返回images，此时界面如果需要调用缩略图或者其他图片处理，则需要对图片的url进行相应的改变，最后实际dom处理的数据是来自resizeImages<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  watch: &#123;</span><br><span class="line">    images (newImgs) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'imageChanged'</span>, <span class="keyword">this</span>.images)</span><br><span class="line">      <span class="keyword">this</span>.resizeImages = newImgs.map(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          id: img.id,</span><br><span class="line">          path: <span class="string">'200\\'</span> + img.path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><p>图片上传之后，不仅需要保存到本地，而且需要记录其路径和名称，而且还需要生成图片的唯一标识，以便以简单的目录结构保存图片。这就需要用到multer库以及uuid。</p><p>图片存储代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  express  =  <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span>  router  =  express.Router()</span><br><span class="line"><span class="keyword">const</span>  api  =  <span class="built_in">require</span>(<span class="string">'./api'</span>)</span><br><span class="line"><span class="keyword">const</span>  multer  =  <span class="built_in">require</span>(<span class="string">'multer'</span>)</span><br><span class="line"><span class="keyword">const</span>  config  =  <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"><span class="keyword">const</span>  uuid  =  <span class="built_in">require</span>(<span class="string">'uuid/v1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中config.imageStorage.path是保存路径</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="comment">// 设置上传后文件路径，uploads文件夹会自动创建。</span></span><br><span class="line">  destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, config.imageStorage.path)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 给上传文件重命名，获取添加后缀名</span></span><br><span class="line">  filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fileFormat = (file.originalname).split(<span class="string">'.'</span>)</span><br><span class="line">    cb(<span class="literal">null</span>, uuid() + <span class="string">'.'</span> + fileFormat[fileFormat.length - <span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加配置文件到muler对象。</span></span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">  storage: storage</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/image'</span>, upload.array(<span class="string">'image[]'</span>, <span class="number">9</span>), (req, res, next) =&gt; &#123;</span><br><span class="line">api.uploadImage(req, res, next)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后，图片相关参数和请求参数都在req.file中，以下参考代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">uploadImage (req, res, next) &#123;</span><br><span class="line">    <span class="keyword">var</span> files = req.files</span><br><span class="line">    <span class="keyword">var</span> imageSqlData = []</span><br><span class="line">    <span class="keyword">var</span> date = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> mblogid = req.body.mblogid</span><br><span class="line">    files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      imageSqlData.push([file.originalname, file.path, date, mblogid])</span><br><span class="line">    &#125;)</span><br><span class="line">    pool.getConnection(<span class="function">(<span class="params">err, conn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">      <span class="keyword">var</span> sql = sqlMap.image.addImages</span><br><span class="line">      conn.query(sql, [imageSqlData], (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sqlGetImages = sqlMap.image.getImages</span><br><span class="line">        conn.query(sqlGetImages, [mblogid], (err, result) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"></span><br><span class="line">          result = result.filter(<span class="function">(<span class="params">curRes</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !!imageSqlData.find(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> data.includes(curRes.path) &amp;amp;&amp;amp; data.includes(curRes.name) &amp;amp;&amp;amp; data.includes(curRes.date)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">          res.json(result)</span><br><span class="line">          conn.release()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图片上传&quot;&gt;&lt;a href=&quot;#图片上传&quot; class=&quot;headerlink&quot; title=&quot;图片上传&quot;&gt;&lt;/a&gt;图片上传&lt;/h3&gt;&lt;p&gt;最近在做图片上传功能，使用vue相关技术栈。其中图片上传的需求是，支持多图上传，使用到了&lt;a href=&quot;http://va
      
    
    </summary>
    
      <category term="02-js" scheme="http://lzuliuyun.com/categories/02-js/"/>
    
    
      <category term="上传" scheme="http://lzuliuyun.com/tags/%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="图片" scheme="http://lzuliuyun.com/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>图片裁剪</title>
    <link href="http://lzuliuyun.com/2018/07/09/%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA/"/>
    <id>http://lzuliuyun.com/2018/07/09/图片裁剪/</id>
    <published>2018-07-09T09:43:39.000Z</published>
    <updated>2018-07-10T13:11:42.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h3><p>图片的处理包括，图片裁剪、压缩甚至是格式转换，另外也可以增加水印等处理。</p><h3 id="相关图像库"><a href="#相关图像库" class="headerlink" title="相关图像库"></a>相关图像库</h3><p>简单调研了下，图像处理有sharp、imagemagick、gm，其中对于性能处理，sharp表现优异。</p><blockquote><p>性能测试 <a href="http://sharp.pixelplumbing.com/en/stable/performance/" target="_blank" rel="noopener">http://sharp.pixelplumbing.com/en/stable/performance/</a></p></blockquote><p><img src="http://p66xl7flj.bkt.clouddn.com/images/670cdefe-c8d5-4026-94e6-7b0ccd65bd0f.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><p>而且官方说对于更大得cpu缓存性能更好，并且限制因素主要是IO</p><blockquote><p>Greater libvips performance can be expected with caching enabled (default) and using 8+ core machines, especially those with larger L1/L2 CPU caches.</p></blockquote><blockquote><p>The I/O limits of the relevant (de)compression library will generally determine maximum throughput.</p></blockquote><p>最后我决定采用sharp库，其官方文档地址：<a href="http://sharp.pixelplumbing.com/en/stable/" target="_blank" rel="noopener">http://sharp.pixelplumbing.com/en/stable/</a></p><h3 id="图片裁剪处理"><a href="#图片裁剪处理" class="headerlink" title="图片裁剪处理"></a>图片裁剪处理</h3><h4 id="图片裁剪处理-1"><a href="#图片裁剪处理-1" class="headerlink" title="图片裁剪处理"></a>图片裁剪处理</h4><p>官方api接口很简单，不过目前只做了裁剪功能的需求，代码如下。其中width或者height为undefined或者0时，则为根据对应宽高等比压缩，如果同时为空，则只压缩图像质量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用之前，请先安装sharp库</span></span><br><span class="line"><span class="comment">   * options: 参数</span></span><br><span class="line"><span class="comment">   * thumbPath: 缩略图缓存地址</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  resizeImage (options, thumbPath) &#123;</span><br><span class="line">    <span class="comment">// http://localhost:3000/images/upload/0a72cec0-7f44-11e8-9260-c144568577bd.jpeg</span></span><br><span class="line">    <span class="keyword">let</span> transform = sharp(options.imagePath)</span><br><span class="line">    transform = transform.toFormat(options.format)</span><br><span class="line">    <span class="keyword">let</span> width = (options.width &amp;amp;&amp;amp; <span class="built_in">parseInt</span>(options.width)) || <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> height = (options.height &amp;amp;&amp;amp; <span class="built_in">parseInt</span>(options.height)) || <span class="literal">undefined</span></span><br><span class="line">    transform = transform.resize(width, height)</span><br><span class="line">    <span class="keyword">return</span> transform.toFile(thumbPath)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="缩略图缓存逻辑"><a href="#缩略图缓存逻辑" class="headerlink" title="缩略图缓存逻辑"></a>缩略图缓存逻辑</h4><p>由于缩略图会被经常调用，因此生成的缓存图片则会进行缓存，生成缓存的策略是根据url请求参数来决定是否唯一，也就说相同的请求url，其结果也是一致的。因此针对url字符串进行一个hash计算，得到这个图片的唯一标识符作为缓存图片的名称。其中hash计算代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用之前请先安装crypto库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cryptStr</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> md5 = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">  <span class="keyword">return</span> md5.update(str).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存是否存在判断逻辑<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> thumbPath = path.join(__dirname, <span class="string">'../'</span> + config.imageStorage.thumb) + cryptStr(req.path) + <span class="string">'.'</span> + options.format</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> imagePath = path.join(__dirname, <span class="string">'../'</span> + options.imagefile)</span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(thumbPath)) &#123;</span><br><span class="line">      outputImage(thumbPath, res)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fs.existsSync(imagePath)) &#123;</span><br><span class="line">      options.imagePath = imagePath</span><br><span class="line">      <span class="keyword">this</span>.resizeImage(options, thumbPath, res).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        outputImage(thumbPath, res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Then image resource is not exist'</span>)</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">outputImage</span> (<span class="params">thumbPath, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> content = fs.readFileSync(thumbPath, <span class="string">'binary'</span>)</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'Ok'</span>)</span><br><span class="line">    res.write(content, <span class="string">'binary'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="服务URL地址"><a href="#服务URL地址" class="headerlink" title="服务URL地址"></a>服务URL地址</h4><p>由于图片是一个通用的服务，很多地方都需要图片进行处理，因此，在路由设计中，并不考虑当做一个api的接口来处理，在设计过程中，有参考了resize-server的设计：<a href="https://github.com/tbasse/resize-server/blob/80e546988201623ae9e066a4755dd18837173343/README.md" target="_blank" rel="noopener">https://github.com/tbasse/resize-server/blob/80e546988201623ae9e066a4755dd18837173343/README.md</a> ,其URL接口的设计风格很好，对前台调用很友好，只需根据具体的需求配置url参数即可。另外，七牛云的图片服务也是类似，最后决定采用这种接口清晰的方案，很多代码有参考该项目。下面贴出部分相关代码。</p><p>url使用方法：<br><strong> url地址 </strong><br><a href="http://serveraddress/`resize`/`output`/`url`" target="_blank" rel="noopener">http://serveraddress/`resize`/`output`/`url`</a><br><strong> url参数 </strong><br>1.resize</p><ul><li>width x<br>height stretch to dimensions</li><li>c width x height[gravity]<br>crop to dimensions with optional gravity, Default gravity is c for center，Choices include c, n, ne, e, se, s, sw, w, nw</li><li>h height<br>h160 scale proportional to height</li><li>w width<br>w120 scale proportional to width</li></ul><p>2.output</p><ul><li>format<br>Default formatis jpg Choices include jgp and png</li><li>jpg,quality<br>Optional quality setting for jpg format (Defaults to 80)</li></ul><p>3.url<br>A valid URL to the source image to be resized</p><p><strong> 例子 </strong><br><a href="http://serveraddress/120x160/jpg/http://domain.com/image.jpg" target="_blank" rel="noopener">http://serveraddress/120x160/jpg/http://domain.com/image.jpg</a><br><a href="http://serveraddress/c300x300/jpg/http://domain.com/image.jpg" target="_blank" rel="noopener">http://serveraddress/c300x300/jpg/http://domain.com/image.jpg</a><br><a href="http://serveraddress/c300x300n/jpg/http://domain.com/image.jpg" target="_blank" rel="noopener">http://serveraddress/c300x300n/jpg/http://domain.com/image.jpg</a><br><a href="http://serveraddress/h300/jpg/http://domain.com/image.jpg" target="_blank" rel="noopener">http://serveraddress/h300/jpg/http://domain.com/image.jpg</a><br><a href="http://serveraddress/w300/jpg,100/http://domain.com/image.jpg" target="_blank" rel="noopener">http://serveraddress/w300/jpg,100/http://domain.com/image.jpg</a></p><p>相关代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RequestSplitter</span> (<span class="params">url, query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.url = url || <span class="string">''</span></span><br><span class="line">  <span class="keyword">this</span>.urlMatch = RequestSplitter.urlMatch</span><br><span class="line">  <span class="keyword">this</span>.query = query || <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixUrlProtocol</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> url.replace(<span class="regexp">/^([a-z]+:)\/+([^\/])/</span>, <span class="string">'$1//$2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestSplitter.urlMatch = <span class="keyword">new</span> <span class="built_in">RegExp</span>([</span><br><span class="line">  <span class="string">'^\/?(c|w|h)?([0-9]+)x?([0-9]+)?,?'</span>,</span><br><span class="line">  <span class="string">'(c|e|w|n(?:e|w)?|s(?:e|w)?)?'</span>,</span><br><span class="line">  <span class="string">'\/?(png|jpg)?,?([0-9]+)?'</span>,</span><br><span class="line">  <span class="string">'\/(.*)$'</span></span><br><span class="line">].join(<span class="string">''</span>))</span><br><span class="line"></span><br><span class="line">RequestSplitter.prototype.mapOptions = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> param = <span class="keyword">this</span>.url.match(<span class="keyword">this</span>.urlMatch)</span><br><span class="line">  <span class="keyword">var</span> options</span><br><span class="line"></span><br><span class="line">  param[<span class="number">7</span>] = fixUrlProtocol(param[<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">  options = &#123;</span><br><span class="line">    action: param[<span class="number">1</span>] === <span class="string">'c'</span> ? <span class="string">'crop'</span> : <span class="string">'resize'</span>,</span><br><span class="line">    width: param[<span class="number">1</span>] === <span class="string">'h'</span> ? <span class="string">''</span> : param[<span class="number">2</span>],</span><br><span class="line">    height: param[<span class="number">1</span>] === <span class="string">'w'</span> ? <span class="string">''</span> : param[<span class="number">1</span>] === <span class="string">'h'</span> ? param[<span class="number">2</span>] : param[<span class="number">3</span>],</span><br><span class="line">    gravity: param[<span class="number">4</span>] || <span class="string">'c'</span>,</span><br><span class="line">    format: param[<span class="number">5</span>] || <span class="string">'jpg'</span>,</span><br><span class="line">    quality: param[<span class="number">6</span>] || <span class="string">'80'</span>,</span><br><span class="line">    imagefile: param[<span class="number">7</span>],</span><br><span class="line">    url: param[<span class="number">7</span>] + <span class="keyword">this</span>.buildQueryString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options.quality = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.min(<span class="number">100</span>, <span class="built_in">Math</span>.max(<span class="number">0</span>, options.quality)))</span><br><span class="line">  options.suffix = path.extname(options.imagefile)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestSplitter.prototype.buildQueryString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> queryArray = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.query) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.query.hasOwnProperty(i)) &#123;</span><br><span class="line">      queryArray.push(i + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(<span class="keyword">this</span>.query[i]))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'?'</span> + queryArray.join(<span class="string">'&amp;amp;'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = RequestSplitter</span><br></pre></td></tr></table></figure></p><p>路由代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(RequestSplitter.urlMatch, (req, res, next) =&gt; &#123;</span><br><span class="line">  resizeImage.resize(req, res, next)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>以上代码可参考我的git库代码：<a href="https://github.com/lzuliuyun/mini-weibo/tree/master/server" target="_blank" rel="noopener">https://github.com/lzuliuyun/mini-weibo/tree/master/server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图片裁剪&quot;&gt;&lt;a href=&quot;#图片裁剪&quot; class=&quot;headerlink&quot; title=&quot;图片裁剪&quot;&gt;&lt;/a&gt;图片裁剪&lt;/h3&gt;&lt;p&gt;图片的处理包括，图片裁剪、压缩甚至是格式转换，另外也可以增加水印等处理。&lt;/p&gt;
&lt;h3 id=&quot;相关图像库&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="04-backend" scheme="http://lzuliuyun.com/categories/04-backend/"/>
    
    
      <category term="nodejs" scheme="http://lzuliuyun.com/tags/nodejs/"/>
    
      <category term="图片" scheme="http://lzuliuyun.com/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="裁剪" scheme="http://lzuliuyun.com/tags/%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署笔记</title>
    <link href="http://lzuliuyun.com/2018/07/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/"/>
    <id>http://lzuliuyun.com/2018/07/09/服务器部署笔记/</id>
    <published>2018-07-09T09:20:47.000Z</published>
    <updated>2018-07-10T13:11:52.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>部署好服务，上传图片时，发现nginx报错413 Request Entity Too Large，报错原因是nginx不允许上传配置过大的文件，因此适当调整配置文件即可。</p><ul><li>配置路径： /etc/nginx/nginx.conf</li><li>修改方法：在http部分，增加<code>client_max_body_size 4m;</code>配置，其中4m表示允许最大上传为4M大小</li><li>重启： nginx restart</li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="修改编码为utf8m64以支持emoji"><a href="#修改编码为utf8m64以支持emoji" class="headerlink" title="修改编码为utf8m64以支持emoji"></a>修改编码为utf8m64以支持emoji</h4><p>本机开发环境是window，服务器是centos，两者修改方法基本一致。</p><ul><li>首先都是需要备份数据，不赘述。</li><li>修改配置文件</li></ul><p>windows配置文件为my.ini，路径在mysql的安装目录或者在programdata目录，不清楚可以全局搜索文件。centos配置文件目录：vim /etc/my.cnf。</p><p>两个系统的数据库配置修改参数方式一样，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对本地的mysql客户端的配置</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对其他远程连接的mysql客户端的配置</span></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地mysql服务的配置</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># handshake配置必须要</span></span><br><span class="line">character-set-client-handshake=FALSE</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="comment"># 待继续验证是否需要</span></span><br><span class="line">init_connect=<span class="string">'SET NAMES utf8mb4'</span></span><br></pre></td></tr></table></figure><ul><li>重启mysql服务</li></ul><p>window在任务管理器找到服务mysql，重启即可。<br>centos: <code>service mysql restart</code></p><ul><li>执行sql检查字符设置是否正确</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">WHERE</span> Variable_name <span class="keyword">LIKE</span> <span class="string">'character\_set\_%'</span> <span class="keyword">OR</span> Variable_name <span class="keyword">LIKE</span> <span class="string">'collation%'</span>;</span><br></pre></td></tr></table></figure><p>当结果如下时，说明设置正确<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">--+--+</span></span><br><span class="line">| Variable_name            | Value              |</span><br><span class="line">+<span class="comment">--+--+</span></span><br><span class="line">| character_set_client     | utf8mb4            |</span><br><span class="line">| character_set_connection | utf8mb4            |</span><br><span class="line">| character_set_database   | utf8mb4            |</span><br><span class="line">| character_set_filesystem | binary             |</span><br><span class="line">| character_set_results    | utf8mb4            |</span><br><span class="line">| character_set_server     | utf8mb4            |</span><br><span class="line">| character_set_system     | utf8               |</span><br><span class="line">| collation_connection     | utf8mb4_unicode_ci |</span><br><span class="line">| collation_database       | utf8mb4_unicode_ci |</span><br><span class="line">| collation_server         | utf8mb4_unicode_ci |</span><br><span class="line">+<span class="comment">--+--+</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h3&gt;&lt;h4 id=&quot;413-Request-Entity-Too-Large&quot;&gt;&lt;a href=&quot;#413-Request-E
      
    
    </summary>
    
      <category term="07-linux" scheme="http://lzuliuyun.com/categories/07-linux/"/>
    
    
      <category term="linux" scheme="http://lzuliuyun.com/tags/linux/"/>
    
      <category term="运维" scheme="http://lzuliuyun.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>图片自适应居中</title>
    <link href="http://lzuliuyun.com/2018/07/09/%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%B1%85%E4%B8%AD/"/>
    <id>http://lzuliuyun.com/2018/07/09/图片自适应居中/</id>
    <published>2018-07-09T08:09:05.000Z</published>
    <updated>2018-07-10T13:14:29.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>父级用相对定位，图片则用绝对定位，且占满空间；为避免图片过大或过小，需要设置最大宽高；实际宽高以及margin设置为auto。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">width</span>: auto;</span><br><span class="line">      <span class="attribute">height</span>: auto;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>全部代码：<br><a href="https://github.com/lzuliuyun/css-tips/blob/master/case/image.html" target="_blank" rel="noopener">https://github.com/lzuliuyun/css-tips/blob/master/case/image.html</a></p><p>效果：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/5aca7d30-c16e-4521-a2ee-fccca9e6f4a5.jpg?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code&quot;&gt;&lt;/a&gt;code&lt;/h3&gt;&lt;p&gt;父级用相对定位，图片则用绝对定位，且占满空间；为避免图片过大或过小，需要设置最大宽高；实际宽高以及margin设置为auto
      
    
    </summary>
    
      <category term="01-css" scheme="http://lzuliuyun.com/categories/01-css/"/>
    
    
      <category term="css" scheme="http://lzuliuyun.com/tags/css/"/>
    
      <category term="图片" scheme="http://lzuliuyun.com/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="水平居中" scheme="http://lzuliuyun.com/tags/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>textarea高度自适应</title>
    <link href="http://lzuliuyun.com/2018/07/09/textarea%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://lzuliuyun.com/2018/07/09/textarea高度自适应/</id>
    <published>2018-07-09T02:55:14.000Z</published>
    <updated>2018-07-10T13:10:24.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><p>首先html结构很简单，pre是块级元素，用来做textarea高度撑开的辅助元素；span元素用于同步textare文本内容；br元素用于从textarea复制的文本中的首尾的空白能够正确的被浏览器渲染而不会出现异常问题。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><p>textarea绝对定位，高度为100%，也就是高度随着外面container的高度变化。pre是块元素，占用空间但是不可见。在textarea输入的时候，实时的把内容写入到pre中，因为pre是container的子元素，且所以外层container的高度会被pre的高度撑开。</p><p>首先重置默认样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次父级需要用相对定位，作为textarea绝对定位的参考。需要注意的是，pre是用来撑开父元素的，其visibility值为hidden,也就是占空间但不显示。最后，要想保持pre和textarea的内容一致的情况下，渲染之后的宽高保持一致，需要设置其文本换行方式和字体大小一致，否则两者的渲染会有出入。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/*allow padding*/</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*the follwing settings should to be setted to keep pre and textarea the same size(width height padding)*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTextareaEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> textarea = <span class="built_in">document</span>.querySelector(<span class="string">'textarea'</span>);</span><br><span class="line">  <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">'span'</span>);</span><br><span class="line"></span><br><span class="line">  textarea.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    span.textContent = textarea.value;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//init span content if textarea has value</span></span><br><span class="line">  span.textContent = textarea.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用oninput而不是onchange的原因：<br>onkeyup事件：使用复制粘贴时，高度不能自动改变<br>onchange事件：在内容改变（两次内容有可能相等）且失去焦点时触发，不能实时同步<br>oninput事件：HTML5 的标准事件，可以用来检测元素通过用户界面发生的内容变化，在内容修改后立即被触发</p><p>当然我用的是vue框架，js代码就更简单，直接绑定内容就好了。</p><p>以上所有代码在：<br><a href="https://github.com/lzuliuyun/css-tips/blob/master/case/textarea.html" target="_blank" rel="noopener">https://github.com/lzuliuyun/css-tips/blob/master/case/textarea.html</a></p><p><strong> 参考 </strong></p><blockquote><p><a href="http://alistapart.com/article/expanding-text-areas-made-elegant" target="_blank" rel="noopener">http://alistapart.com/article/expanding-text-areas-made-elegant</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code&quot;&gt;&lt;/a&gt;code&lt;/h3&gt;&lt;h4 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="01-css" scheme="http://lzuliuyun.com/categories/01-css/"/>
    
    
      <category term="css" scheme="http://lzuliuyun.com/tags/css/"/>
    
      <category term="自适应" scheme="http://lzuliuyun.com/tags/%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>常用命令</title>
    <link href="http://lzuliuyun.com/2018/06/29/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lzuliuyun.com/2018/06/29/常用命令/</id>
    <published>2018-06-29T08:31:43.000Z</published>
    <updated>2018-07-10T14:48:04.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>文件和目录:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home 进入 <span class="string">'/home'</span> 目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> .. 返回上一级目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -a /tmp/dir1 . 复制一个目录到当前工作目录（.代表当前目录）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls 查看目录中的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -f file1 删除 <span class="string">'file1'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf dir1 删除 <span class="string">'dir1'</span> 目录及其子目录内容</span></span><br></pre></td></tr></table></figure></p><p>查看文件内容:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat file1 从第一个字节开始正向`查看文件的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tac file1 从最后一行开始反向查看一个文件的内容</span></span><br></pre></td></tr></table></figure></p><p>文本处理:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grep str /tmp/<span class="built_in">test</span> 在文件 <span class="string">'/tmp/test'</span> 中查找 <span class="string">"str"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep ^str /tmp/<span class="built_in">test</span> 在文件 <span class="string">'/tmp/test'</span> 中查找以 <span class="string">"str"</span> 开始的行</span></span><br></pre></td></tr></table></figure></p><p>查找:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> find / -name file1 从 <span class="string">'/'</span> 开始进入根文件系统查找文件和目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> find / -user user1 查找属于用户 <span class="string">'user1'</span> 的文件和目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> find /home/user1 -name \*.bin 在目录 <span class="string">'/ home/user1'</span> 中查找以 <span class="string">'.bin'</span> 结尾的文件</span></span><br></pre></td></tr></table></figure></p><p>压缩和解压:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> bzip2 file1 压缩file1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bunzip2 file1.bz2 解压file1.bz2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gzip file1 压缩file1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gunzip file1.gz 解压file1.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -cvf archive.tar file1 把file1打包成 archive.tar</span></span><br><span class="line">（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）</span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -cvf archive.tar file1 dir1 把 file1，dir1 打包成 archive.tar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -tf archive.tar 显示一个包中的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -xvf archive.tar 释放一个包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -xvf archive.tar -C /tmp 把压缩包释放到 /tmp目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zip file1.zip file1 创建一个zip格式的压缩包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unzip file1.zip 解压一个zip格式的压缩包到当前目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unzip test.zip -d /tmp/ 解压一个zip格式的压缩包到 /tmp 目录</span></span><br></pre></td></tr></table></figure></p><p>快捷键:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ctrl + l 清屏，相当于执行clear命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tab 自动补全命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+C 取消当前行输入的命令</span></span><br></pre></td></tr></table></figure></p><p>yum工具:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y install [package] 下载并安装一个rpm包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum localinstall [package.rpm] 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y update 更新当前系统中安装的所有rpm包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum update [package] 更新一个rpm包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum remove [package] 删除一个rpm包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum list 列出当前系统中安装的所有包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum search [package] 在rpm仓库中搜寻软件包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum list | grep xxx 查询xxx软件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum clean [package] 清除缓存目录（/var/cache/yum）下的软件包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum clean headers 删除所有头文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum clean all 删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;p&gt;文件和目录:&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="07-linux" scheme="http://lzuliuyun.com/categories/07-linux/"/>
    
    
      <category term="linux" scheme="http://lzuliuyun.com/tags/linux/"/>
    
      <category term="centos" scheme="http://lzuliuyun.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云搭建web网站</title>
    <link href="http://lzuliuyun.com/2018/06/29/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BAweb%E7%BD%91%E7%AB%99/"/>
    <id>http://lzuliuyun.com/2018/06/29/腾讯云搭建web网站/</id>
    <published>2018-06-29T07:32:20.000Z</published>
    <updated>2018-07-10T13:11:56.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>注册域名之后，添加以下解析规则。其中，app是二级域名，也就是app.lzuliuyun.cn。记录值则是要解析的ip地址，也就是云服务器的公网ip地址。</p><p><img src="http://p66xl7flj.bkt.clouddn.com/images/ebb9e196-10bd-41e2-90f4-e222d50a8e2c.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>系统建议使用centos系统。centos系统是redhat的企业版而来，而且有长期的支持，稳定性很好，很多企业都在用。</p><p>安装或者重装时，会提示设置root用户密码。那么记住该密码即可。</p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>系统安装好之后，本地可使用xshell或xftp连接。</p><h4 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h4><p>xshell添加连接配置如下：</p><ul><li><p>常规连接<br><img src="http://p66xl7flj.bkt.clouddn.com/images/fe2b9245-5667-40c2-9f87-47c263a4697e.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li><p>用户密码设置<br><img src="http://p66xl7flj.bkt.clouddn.com/images/28be1c00-37a1-4f24-8fb7-9efb8c1e7b53.jpg?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update //更新系统</span><br><span class="line">sudo yum install java-1.8.0-openjdk.x86_64 //安装jdk</span><br><span class="line">java -version //查看java版本</span><br></pre></td></tr></table></figure></li></ul><h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><ul><li><p>首先去tomcat官网找到linux的版本<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">下载地址</a>, 复制所需版本的下载地址链接。</p></li><li><p>接着执行以下命令开始安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /opt   //进入opt目录</span><br><span class="line">wget http://www-eu.apache.org/dist/tomcat/tomcat-8/v8.5.32/bin/apache-tomcat-8.5.32.tar.gz    //下载安装包</span><br><span class="line">tar -zxvf apache-tomcat-8.5.32.tar.gz //解压安装包</span><br><span class="line">rm -f apache-tomcat-8.5.32.tar.gz //删除安装包</span><br></pre></td></tr></table></figure></li><li><p>启动或者关闭tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/apache-tomcat-8.5.32/bin/startup.sh  //直接执行该脚本启动</span><br><span class="line">/opt/apache-tomcat-8.5.32/bin/shutdown.sh  //直接执行该脚本关闭</span><br></pre></td></tr></table></figure></li></ul><p>访问端口8080，查看是否可访问</p><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y nginx //安装nginx</span><br><span class="line">service nginx start //启动</span><br><span class="line">service nginx restart</span><br><span class="line">service nginx stop</span><br></pre></td></tr></table></figure><p>nginx默认访问80端口，直接访问IP或者域名，检查是否安装成功</p><h4 id="node-amp-amp-express"><a href="#node-amp-amp-express" class="headerlink" title="node &amp;&amp; express"></a>node &amp;&amp; express</h4><p>安装nodejs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class="line">sudo yum -y install nodejs</span><br><span class="line">sudo yum install gcc-c++ make</span><br><span class="line">sudo yum install nodejs npm --enablerepo=epel</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装express<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br><span class="line">npm install express-generator -g</span><br><span class="line">cd /opt</span><br><span class="line">mkdir express</span><br><span class="line">cd express</span><br><span class="line">express app</span><br><span class="line">cd app</span><br><span class="line">npm install</span><br><span class="line">node ./bin/www &amp;amp;   //或者npm start</span><br></pre></td></tr></table></figure></p><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>参考文章：<a href="https://www.lookk.cn/2017/12/02/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8centOS%E5%AE%89%E8%A3%85JDK-Tomcat-Mysql/" target="_blank" rel="noopener">腾讯云服务器centOS安装JDK+Tomcat+Mysql</a>, 该文章已经剪辑到当前文章所在目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line">set password for 'root'@'localhost' =password('@163.com.mysql');</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@'%'identified by '@163.com.mysql';</span><br></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="nginx80代理tomcat8080端口"><a href="#nginx80代理tomcat8080端口" class="headerlink" title="nginx80代理tomcat8080端口"></a>nginx80代理tomcat8080端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">vim tomcat.conf</span><br><span class="line"></span><br><span class="line">//增加以下内容，当然app当中也需要有内容</span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name lzuliuyun.cn;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080/app/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nginx80代理子域名-express-3000端口"><a href="#nginx80代理子域名-express-3000端口" class="headerlink" title="nginx80代理子域名 express 3000端口"></a>nginx80代理子域名 express 3000端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">vim express.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name app.lzuliuyun.cn;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:3000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完后，重启nginx: <code>service nginx restart</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;域名&quot;&gt;&lt;a href=&quot;#域名&quot; class=&quot;headerlink&quot; title=&quot;域名&quot;&gt;&lt;/a&gt;域名&lt;/h3&gt;&lt;p&gt;注册域名之后，添加以下解析规则。其中，app是二级域名，也就是app.lzuliuyun.cn。记录值则是要解析的ip地址，也就是云服务器的
      
    
    </summary>
    
      <category term="06-project" scheme="http://lzuliuyun.com/categories/06-project/"/>
    
    
      <category term="linux" scheme="http://lzuliuyun.com/tags/linux/"/>
    
      <category term="服务器" scheme="http://lzuliuyun.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="http://lzuliuyun.com/2018/06/29/vim/"/>
    <id>http://lzuliuyun.com/2018/06/29/vim/</id>
    <published>2018-06-29T03:02:07.000Z</published>
    <updated>2018-07-10T13:05:58.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><h4 id="insert模式"><a href="#insert模式" class="headerlink" title="insert模式"></a>insert模式</h4><p>就是编辑模式</p><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><p>自动提示： <code>&lt;C-n&gt; 和 &lt;C-p&gt;</code></p><h4 id="normal模式"><a href="#normal模式" class="headerlink" title="normal模式"></a>normal模式</h4><p>使用esc进入</p><h5 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h5><ul><li>i → Insert 模式，按 ESC 回到 Normal 模式.</li><li>x → 删当前光标所在的一个字符。</li><li>:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</li><li>dd → 删除当前行，并把删除的行存到剪贴板里</li><li>p → 粘贴剪贴板</li></ul><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><ul><li>a → 在光标后插入</li><li>o → 在当前行后插入一个新行</li><li>O → 在当前行前插入一个新行</li><li>cw → 替换从光标所在位置后到一个单词结尾的字符</li></ul><h5 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h5><ul><li>^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li><li>$ → 到本行行尾</li><li>/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）</li></ul><h5 id="拷贝-粘贴"><a href="#拷贝-粘贴" class="headerlink" title="拷贝/粘贴"></a>拷贝/粘贴</h5><ul><li>P → 粘贴</li><li>y → 拷贝当前行当行于 ddP</li></ul><h5 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h5><ul><li>u → undo</li><li><c-r> → redo</c-r></li></ul><h5 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h5><ul><li>:e &lt;path/to/file&gt; → 打开一个文件</li><li>:w → 存盘</li><li>:w cszhi.com 保存至cszhi.com文件</li><li>:saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt;</li><li>:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li><li>:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。</li><li>:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</li></ul><h5 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h5><ul><li>. → (小数点) 可以重复上一次的命令</li><li>N<command> → 重复某个命令N次</li></ul><h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><ul><li>NG → 到第 N 行 （陈皓注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</li><li>gg → 到第一行。（陈皓注：相当于1G，或 :1）</li><li>G → 到最后一行</li></ul><h5 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h5><ul><li>% : 匹配括号移动，包括 (, {, [. （陈皓注：你需要把光标先移到括号上）</li><li>* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li></ul><h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><ul><li>v</li></ul><h5 id="块操作"><a href="#块操作" class="headerlink" title="块操作"></a>块操作</h5><p><strong>块注释</strong><br>注意命令，ctrl+v, 以及大写的I</p><ul><li>^ → 到行头</li><li><code>&lt;C-v&gt;</code> → 开始块操作</li><li><code>&lt;C-d&gt;</code> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)</li><li>I– [ESC] → I是插入，插入“–”，按ESC键来为每一行生效。</li></ul><p><strong>块尾补充</strong></p><ul><li><code>&lt;C-v&gt;</code></li><li>选中相关的行 (可使用 j 或 <c-d> 或是 /pattern 或是 % 等……)</c-d></li><li>$ 到行最后</li><li>A, 输入字符串，按 ESC。</li></ul><p><strong>缩进</strong></p><ul><li>&lt; 或 &gt; → 左右缩进</li><li>= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）</li><li>J → 把所有的行连接起来（变成一行）</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>显示行号： set nu!<br>设置tab： set tabstop=4<br>设置退格键可用： set backspace=2</p><p>可以修改vim的配置文件<br>vim /etc/vimrc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模式&quot;&gt;&lt;a href=&quot;#模式&quot; class=&quot;headerlink&quot; title=&quot;模式&quot;&gt;&lt;/a&gt;模式&lt;/h3&gt;&lt;h4 id=&quot;insert模式&quot;&gt;&lt;a href=&quot;#insert模式&quot; class=&quot;headerlink&quot; title=&quot;insert模式&quot;
      
    
    </summary>
    
      <category term="07-linux" scheme="http://lzuliuyun.com/categories/07-linux/"/>
    
    
      <category term="linux" scheme="http://lzuliuyun.com/tags/linux/"/>
    
      <category term="vim" scheme="http://lzuliuyun.com/tags/vim/"/>
    
      <category term="编辑器" scheme="http://lzuliuyun.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 插件开发</title>
    <link href="http://lzuliuyun.com/2018/06/20/jQuery%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://lzuliuyun.com/2018/06/20/jQuery 插件开发/</id>
    <published>2018-06-20T02:31:08.000Z</published>
    <updated>2018-07-10T13:10:11.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jQuery-插件命名规范"><a href="#1-jQuery-插件命名规范" class="headerlink" title="1. jQuery 插件命名规范"></a>1. jQuery 插件命名规范</h2><p>通常jQuery采用jquery.pluginName.js方式命名，min版本则采用jquery.pluginName.min.js 方式命名，采用这种命名方式方便开发人员在full版和min版之间进行切换。</p><h2 id="2-jQuery-插件开发模式"><a href="#2-jQuery-插件开发模式" class="headerlink" title="2.jQuery 插件开发模式"></a>2.jQuery 插件开发模式</h2><ul><li><strong>\$.extend() 扩展jQuery</strong></li><li><strong>\$.fn 向jQuery添加新的方法 (通过jQuery函数prototype属性别名jquery.fn进行扩展)</strong></li><li><strong>通过\$.widget()应用jQuery UI部件工厂方式创建</strong></li></ul><h3 id="2-1-extend-扩展模式"><a href="#2-1-extend-扩展模式" class="headerlink" title="2.1 \$.extend 扩展模式"></a>2.1 \$.extend 扩展模式</h3><p>静态函数\$.extend的作用是将一个或多个对象的内容合并到目标对象，有两种用法：</p><ol><li>jQuery.extend(target [,object1] [,objectN… ])</li><li>jQuery.extend([deep],target,object1 [,objectN… ])</li></ol><p>用法二是用法一的变体，参数deep用于指示是否深度递归合并。</p><p><strong>说明：</strong></p><ul><li>该函数复制的对象属性包括方法在内。此外，还会复制对象继承自原型中的属性(JS内置的对象除外)；</li><li>参数deep的默认值为false，你可以为该参数明确指定true值，但不能明确指定false值。简而言之，第一个参数不能为false值；</li><li>如果参数为null或undefined，则该参数将被忽略；</li><li><font color="red">如果只为$.extend()指定了一个参数，则意味着参数target被省略。此时，target就是jQuery对象本身。通过这种方式，我们可以为全局对象jQuery添加新的函数；</font></li><li><font color="red">如果多个对象具有相同的属性，则后者会覆盖前者的属性值。</font></li></ul><blockquote><p>关于extend更深层次的用法见 <a href="http://www.365mini.com/page/jquery_extend.htm" target="_blank" rel="noopener">extend复制方法</a> ?</p></blockquote><p>最后两种特性用的最多，常用于插件默认设置合并等等；</p><p>通过extend扩展jquery命名空间，则是根据第四个特性，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">    sayHelloPlugin: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello,'</span> + (name ? name : <span class="string">'World'</span>) + <span class="string">'!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.sayHelloPlugin(); <span class="comment">//调用</span></span><br><span class="line">$.sayHelloPlugin(<span class="string">'World'</span>); <span class="comment">//带参调用</span></span><br></pre></td></tr></table></figure><p>也可以理解为在jQuery中添加全局函数,等同如下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.sayHelloPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'Hello,'</span> + (name ? name : <span class="string">'World'</span>) + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>1.jpg</p><p>如果有多个全局函数，那么写法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">    sayHelloPlugin : <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// put your code here</span></span><br><span class="line">    &#125; ,</span><br><span class="line">    sayWorldPlugin : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// put your code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure></p><p>实际上写插件时，常用的写法是包裹在匿名函数中，代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;  </span><br><span class="line">    $.fn.extend(&#123;  </span><br><span class="line">        pluginName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">            <span class="comment">// put your code here</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;) ;  </span><br><span class="line">&#125;)(jQuery) ;</span><br></pre></td></tr></table></figure></p><p>综上，可见其原理都是通过对象合并扩展到jQuery命名空间中。这种方式定义一些辅助方法比较方便，比如定义一个自定义的console，输出特定格式的信息。典型的例子就是”$.ajax()”这个函数，将函数定义于jQuery的命名空间中。</p><p>？？？但是这种方式无法利用jQuery强大的选择器带来的便利，要处理DOM元素以及将插件更好的运用于所选择的元素上，还是需要使用第二种开发方式。你所见到或使用的插件也大多是通过此种方式开发。</p><p>###2.2 $.fn 原型继承模式###<br>通过原型继承模式，则直接添加动态属性到原型链上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;    </span><br><span class="line">     $.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="comment">// put your code here </span></span><br><span class="line">    &#125; ;  </span><br><span class="line"> &#125;)(jQuery) ;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;  </span><br><span class="line">    $.fn.extend(&#123;  </span><br><span class="line">        pluginName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">            <span class="comment">// put your code here</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;) ;  </span><br><span class="line">&#125;)(jQuery) ;</span><br></pre></td></tr></table></figure><p>上面二者是等价的，对于一个jQuery插件，一个基本的函数就可以很好地工作，但是对于复杂一点的插件就需要提供各种各样的方法和私有函数。你可能会使用不同的命名空间去为你的插件提供各种方法，但是添加过多的命名空间反而会使代码变得混乱，健壮性下降。所以最好的解决办法是适当地定义私有函数和方法。所以我们通过自执行函数与闭包的结合实现模拟的私有插件单元，就像我们上面的实例中一样。</p><p>extend fn 区别？？<br>jQuery.fn = jQuery.prototype = { //jquery code goes here }</p><h3 id="2-3-jQuery-UI-部件工厂（Widget-Factory）"><a href="#2-3-jQuery-UI-部件工厂（Widget-Factory）" class="headerlink" title="2.3 jQuery UI 部件工厂（Widget Factory）"></a>2.3 jQuery UI 部件工厂（Widget Factory）</h3><p>Widget Factory是一个工厂方法，它接收两个或者三个参数：<br>第一个参数是一个名称空间，第二个参数是已有的widget原型，它将从该原型进行继承，第三个参数是一个可选的对象字面量，他作为新的widget原型；<br>Widget Factory 最简单的实现只需要一行代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> $.widget(<span class="string">'namespace.newsStuff'</span>,&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>总结：如何选择开发模式</strong><br>通常使用第二种方法进行简单插件的开发；第三种开发更高级的jQuery部件的，该模式开发的插件带有jQuery内建的特性，比如插件的状态信息自动保存，各种关于插件的常用方法等；而第一种方式太简单，仅仅是在jQuery的命名空间或者理解成jQuery身上添加了一个静态方法而已,它通过调用\$.extend()添加的函数直接通过\$符号调用(\$.myFunction())，而不需要选中DOM元素(\$(‘example’).myFunction())</p><h2 id="3-jQuery-插件开发最佳实践"><a href="#3-jQuery-插件开发最佳实践" class="headerlink" title="3. jQuery 插件开发最佳实践"></a>3. jQuery 插件开发最佳实践</h2><h3 id="让插件接收参数"><a href="#让插件接收参数" class="headerlink" title="让插件接收参数"></a>让插件接收参数</h3><p>一个强劲的插件是可以让使用者随意定制的，这要求我们提供在编写插件时就要考虑得全面些，尽量提供合适的参数。比如现在我们不想让链接只变成红色，我们让插件的使用者自己定义显示什么颜色，要做到这一点很方便，只需要使用者在调用的时候传入一个参数即可。同时我们在插件的代码里面接收。另一方面，为了灵活，使用者可以不传递参数，插件里面会给出参数的默认值。</p><p>在处理插件参数的接收上，通常使用jQuery的extend方法，上面也提到过，但那是给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，所以我们就可以在jQuery身上调用新合并对象里包含的方法了，像上面的例子。</p><blockquote><p>当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。同时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的。</p></blockquote><p>利用这一点，我们可以在插件里定义一个保存插件参数默认值的对象，同时将接收来的参数对象合并到默认对象上，最后就实现了用户指定了值的参数使用指定的值，未指定的参数使用插件默认值。</p><p>为了演示方便，再指定一个参数fontSize，允许调用插件的时候设置字体大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(defaults, options);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.css(&#123;</span><br><span class="line">        <span class="string">'color'</span>: settings.color,</span><br><span class="line">        <span class="string">'fontSize'</span>: settings.fontSize</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们调用的时候指定颜色，字体大小未指定，会运用插件里的默认值12px。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">    <span class="string">'color'</span>: <span class="string">'#2C9929'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>同时指定颜色与字体大小：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">    <span class="string">'color'</span>: <span class="string">'#2C9929'</span>,</span><br><span class="line">    <span class="string">'fontSize'</span>: <span class="string">'20px'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="保护好默认参数"><a href="#保护好默认参数" class="headerlink" title="保护好默认参数"></a>保护好默认参数</h3><p>注意到上面代码调用extend时会将defaults的值改变，这样不好，因为它作为插件因有的一些东西应该维持原样，另外就是如果你在后续代码中还要使用这些默认值的话，当你再次访问它时它已经被用户传进来的参数更改了。</p><p>一个好的做法是将一个新的空对象做为$.extend的第一个参数，defaults和用户传递的参数对象紧随其后，这样做的好处是所有值被合并到这个空对象上，保护了插件里面的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;,defaults, options); <span class="comment">//将一个空对象做为第一个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.css(&#123;</span><br><span class="line">        <span class="string">'color'</span>: settings.color,</span><br><span class="line">        <span class="string">'fontSize'</span>: settings.fontSize</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，插件可以接收和处理参数后，就可以编写出更健壮而灵活的插件了。若要编写一个复杂的插件，代码量会很大，如何组织代码就成了一个需要面临的问题，没有一个好的方式来组织这些代码，整体感觉会杂乱无章，同时也不好维护，所以将插件的所有方法属性包装到一个对象上，用面向对象的思维来进行开发，无疑会使工作轻松很多。</p><h3 id="面向对象的插件开发"><a href="#面向对象的插件开发" class="headerlink" title="面向对象的插件开发"></a>面向对象的插件开发</h3><p>为什么要有面向对象的思维，因为如果不这样，你可能需要一个方法的时候就去定义一个function，当需要另外一个方法的时候，再去随便定义一个function，同样，需要一个变量的时候，毫无规则地定义一些散落在代码各处的变量。还是老问题，不方便维护，也不够清晰。当然，这些问题在代码规模较小时是体现不出来的。如果将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间，因为所有这些变量名还有方法名都是在对象内部。</p><p>接着上面的例子，我们可以把这个插件抽象成一个美化页面的对象，因为他的功能是设置颜色啊字体啊什么的，当然我们还可以加入其他功能比如设置下划线啊什么的。当然对于这个例子抽象成对象有点小题大做，这里仅作演示用。以后我可能会介绍我编写的一个jQuery插件SlipHover,其中代码就比较多，这样的模式就用得上了。</p><p>所以我们新建一个对象命名为Beautifier，然后我们在插件里使用这个对象来编码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line"><span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$element = ele,</span><br><span class="line">    <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">        <span class="string">'textDecoration'</span>:<span class="string">'none'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Beautifier的方法</span></span><br><span class="line">Beautifier.prototype = &#123;</span><br><span class="line">    beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">    <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">    <span class="comment">//调用其方法</span></span><br><span class="line">    <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面这样一改造，我们的代码变得更面向对象了，也更好维护和理解，以后要加新功能新方法，只需向对象添加新变量及方法即可，然后在插件里实例化后即可调用新添加的东西。</p><p>插件的调用还是一样的，我们对代码的改动并不影响插件其他地方，只是将代码的组织结构改动了而以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'#2C9929'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'20px'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>指定文字带下划线（我们在Beautifier对象中新加的功能，默认不带下划线，如上面的例子）的调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'#2C9929'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'20px'</span>,</span><br><span class="line">        <span class="string">'textDecoration'</span>: <span class="string">'underline'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>到这里，你可以更好地编写复杂的插件同时很好地组织代码了。当我们回头去看上面的代码时，其实也还是有改进空间的。也就是下面介绍的关于命名空间及变量各什么的，一些杂项。</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>在jQuery开发中，this关键字通常引用的是当前正在操作的DOM元素。但在当前的jQuery插件的上下文中，this关键字引用的是当前jQuery实例自身。因此在jQuery插件体内，\$.(this).toggle() 可以写为this.toggle();<br>在jQuery插件体内，将this关键字包装在\$()之中，实际上等效于$($(‘#element’))语句。唯一的例外当在jQuery遍历所有元素时。在\$.each()循环的循环体内，this关键字引用的是当前这一轮遍历时所暴露的DOM元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">        $.fn.pinkify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this引用的是jQuery本身，即用jQuery选中的元素，紧接着调用了each()方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//对每个元素进行操作</span></span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;<span class="string">'color'</span>:<span class="string">'#fff'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(jQuery)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在这里面this指的是jQuery选择的元素</span></span><br><span class="line">    <span class="comment">//example: $('a'),则this=$('a');</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>,<span class="string">'red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在插件名字定义的这个函数内部，this指代的是我们在调用该插件时，用jQuery选择器选中的元素，一般是一个jQuery类型的集合。比如$(‘a’)返回的是页面上所有a标签的集合，且这个集合已经是jQuery包装类型了，也就是说，在对其进行操作的时候可以直接调用jQuery的其他方法。而不需要再用美元符号来包装一下。所以在上面的插件代码中，我们在this身上调用的jQuery的css()方法，也就相当于在调用$(‘a’).css()。</p><h3 id="关于命名空间"><a href="#关于命名空间" class="headerlink" title="关于命名空间"></a>关于命名空间</h3><p>不仅仅是jQuery插件的开发，我们在写任何JS代码时都应该注意的一点是不要污染全局命名空间。因为随着你代码的增多，如果有意无意在全局范围内定义一些变量的话，最后很难维护，也容易跟别人写的代码有冲突。比如你在代码中向全局window对象添加了一个变量status用于存放状态，同时页面中引用了另一个别人写的库，也向全局添加了这样一个同名变量，最后的结果肯定不是你想要的。所以不到万不得已，一般我们不会将变量定义成全局的。</p><p>一个好的做法是始终用自<strong>调用匿名函数</strong>包裹你的代码，这样就可以完全放心，安全地将它用于任何地方了，绝对没有冲突。</p><h4 id="自调用匿名函数"><a href="#自调用匿名函数" class="headerlink" title="自调用匿名函数"></a>自调用匿名函数</h4><p>我们知道JavaScript中无法用花括号方便地创建作用域，但函数却可以形成一个作用域，域内的代码是无法被外界访问的。如果我们将自己的代码放入一个函数中，那么就不会污染全局命名空间，同时不会和别的代码冲突。</p><p>如上面我们定义了一个Beautifier全局变量，它会被附到全局的window对象上，为了防止这种事情发生，你或许会说，把所有代码放到jQuery的插件定义代码里面去啊，也就是放到\$.fn.myPlugin里面。这样做倒也是种选择。但会让我们实际跟插件定义有关的代码变得臃肿，而在$.fn.myPlugin里面我们其实应该更专注于插件的调用，以及如何与jQuery互动。</p><p>所以保持原来的代码不变，我们将所有代码用自调用匿名函数包裹。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line">    <span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$element = ele,</span><br><span class="line">        <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="string">'none'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义Beautifier的方法</span></span><br><span class="line">    Beautifier.prototype = &#123;</span><br><span class="line">        beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">                <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">                <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">        <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">        <span class="comment">//调用其方法</span></span><br><span class="line">        <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>这样做的好处，也就是上面所阐述的那样。另外还有一个好处就是，自调用匿名函数里面的代码会在第一时间执行，页面准备好过后，上面的代码就将插件准备好了，以方便在后面的代码中使用插件。</p><p>目前为止似乎接近完美了。如果再考虑到其他一些因素，比如我们将这段代码放到页面后，前面别人写的代码没有用分号结尾，或者前面的代码将window,undefined等这些系统变量或者关键字修改掉了，正好我们又在自己的代码里面进行了使用，那结果也是不可预测的，这不是我们想要的。我知道其实你还没太明白，下面详细介绍。</p><h4 id="支持链式调用"><a href="#支持链式调用" class="headerlink" title="支持链式调用"></a>支持链式调用</h4><p>我们都知道jQuery一个时常优雅的特性是支持链式调用，选择好DOM元素后可以不断地调用其他方法。</p><p>要让插件不打破这种链式调用，只需<strong>return</strong>一下即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在这里面,this指的是用jQuery选中的元素</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//对每个元素进行操作</span></span><br><span class="line">        $(<span class="keyword">this</span>).append(<span class="string">' '</span> + $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>));</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="将系统变量以变量形式传递到插件内部"><a href="#将系统变量以变量形式传递到插件内部" class="headerlink" title="将系统变量以变量形式传递到插件内部"></a>将系统变量以变量形式传递到插件内部</h4><p>来看下面的代码，你猜他会出现什么结果？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//别人的代码</span></span><br><span class="line">&#125;<span class="comment">//注意这里没有用分号结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始我们的代码。。。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>本来别人的代码也正常工作，只是最后定义的那个函数没有用分号结尾而以，然后当页面中引入我们的插件时，报错了，我们的代码无法正常执行。原因是我们用来充当自调用匿名函数的第一对括号与上面别人定义的函数相连，因为中间没有分号嘛，总之我们的代码无法正常解析了，所以报错。</p><p>所以好的做法是我们在<strong>代码开头加一个分号</strong>，这在任何时候都是一个好的习惯。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//别人的代码</span></span><br><span class="line">&#125;<span class="comment">//注意这里没有用分号结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始我们的代码。。。</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>同时，将系统变量以参数形式传递到插件内部也是个不错的实践。</p><p>当我们这样做之后，window等系统变量在插件内部就有了一个局部的引用，可以提高访问速度，会有些许性能的提升,最后我们得到一个非常安全结构良好的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$,window,document,undefined</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    <span class="comment">//blah blah blah...</span></span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>而至于这个undefined，稍微有意思一点，为了得到没有被修改的undefined，我们并没有传递这个参数，但却在接收时接收了它，因为实际并没有传，所以‘undefined’那个位置接收到的就是真实的’undefined’了。是不是有点hack的味道，值得细细体会的技术，当然不是我发明的，都是从前人的经验中学习。???</p><p>增强模式：理解上面的写法<br>示范代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$，window,docment,undefined</span>)</span>&#123;</span><br><span class="line">    $.fn.newStuff  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//your code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>,<span class="built_in">document</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>该模式为增强模式，它为window和document对象创建了一个局部引用，并确保undefined保持undefined的值。增强模式具有更多的优点，比如为window、document创建的局部引用，可以是这两个对象在函数体内最精简？，还可以缩短要查询的表，从而在函数体内加快对这些对象的访问速度。</p></blockquote><p>所以最后我们的插件成了这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document,undefined</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line">    <span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$element = ele,</span><br><span class="line">        <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="string">'none'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义Beautifier的方法</span></span><br><span class="line">    Beautifier.prototype = &#123;</span><br><span class="line">        beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">                <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">                <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">        <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">        <span class="comment">//调用其方法</span></span><br><span class="line">        <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></p><p>一个安全，结构良好，组织有序的插件编写完成。</p><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>在jQuery插件开发中，常常需要遍历一个集合中的所有对象，并对每一个成员执行相应的操作。通常使用\$.each来实现对集合的遍历。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">        $.fn.pinkify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;<span class="string">'color'</span>:<span class="string">'#fff'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(jQuery)</span><br></pre></td></tr></table></figure></p><p>但是在某些情况下，不必使用\$.each(),比如上面的例子，因为\$.css()本身就可以对集合中的每一个元素执行操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">        $.fn.pinkify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $(<span class="keyword">this</span>).css(&#123;<span class="string">'color'</span>:<span class="string">'#fff'</span>&#125;);</span><br><span class="line">    &#125;)(jQuery)</span><br></pre></td></tr></table></figure></p><h3 id="关于变量定义及命名"><a href="#关于变量定义及命名" class="headerlink" title="关于变量定义及命名"></a>关于变量定义及命名</h3><p>现在谈谈关于变量及方法等的命名，没有硬性规定，但为了规范，遵循一些约定还是很有必要的。</p><p><strong>变量定义</strong>：好的做法是把将要使用的变量名用一个var关键字一并定义在代码开头，变量名间用逗号隔开。原因有二：</p><ol><li>便于理解，知道下面的代码会用到哪些变量，同时代码显得整洁且有规律，也方便管理，变量定义与逻辑代码分开；</li><li>是因为JavaScript中所有变量及函数名会自动提升，也称之为JavaScript的Hoist特性，即使你将变量的定义穿插在逻辑代码中，在代码解析运行期间，这些变量的声明还是被提升到了当前作用域最顶端的，所以我们将变量定义在一个作用域的开头是更符合逻辑的一种做法。当然，再次说明这只是一种约定，不是必需的。</li></ol><p><strong>变量及函数命名</strong> 一般使用驼峰命名法（CamelCase），即首个单词的首字母小写，后面单词首字母大写，比如resultArray，requestAnimationFrame。对于常量，所有字母采用大写，多个单词用下划线隔开，比如WIDTH=100，BRUSH_COLOR=’#00ff00’。当变量是jQuery类型时，建议以\$开头，开始会不习惯，但经常用了之后会感觉很方便，因为可以很方便地将它与普通变量区别开来，一看到以\$开头我们就知道它是jQuery类型可以直接在其身上调用jQuery相关的方法，比如var \$element=$(‘a’);之后就可以在后面的代码中很方便地使用它，并且与其他变量容易区分开来。</p><p><strong>引号的使用</strong> ：既然都扯了这些与插件主题无关的了，这里再多说一句，一般HTML代码里面使用双引号，而在JavaScript中多用单引号，比如下面代码所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Wayou'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(‘example’).innerHTML = <span class="string">'&lt; a href="http: //wayouliu.duapp.com/"&gt;'</span>+name+<span class="string">'&lt;/a&gt;'</span>; <span class="comment">//href=".." HTML中保持双引号，JavaScript中保持单引号</span></span><br></pre></td></tr></table></figure></p><p>一方面，HTML代码中本来就使用的是双引号，另一方面，在JavaScript中引号中还需要引号的时候，要求我们单双引号间隔着写才是合法的语句，除非你使用转意符那也是可以的。再者，坚持这样的统一可以保持代码风格的一致，不会出现这里字符串用双引号包着，另外的地方就在用单引号。</p><h2 id="4-插件优化"><a href="#4-插件优化" class="headerlink" title="4. 插件优化"></a>4. 插件优化</h2><h2 id="5-代码混淆与压缩"><a href="#5-代码混淆与压缩" class="headerlink" title="5. 代码混淆与压缩"></a>5. 代码混淆与压缩</h2><p>进行完上面的步骤，已经小有所成了。或许你很早就注意到了，你下载的插件里面，一般都会提供一个压缩的版本一般在文件名里带个’min’字样。也就是minified的意思，压缩浓缩后的版本。并且平时我们使用的jQuery也是官网提供的压缩版本，jquery.min.js。</p><p>这里的压缩不是指代码进行功能上的压缩，而是通过将代码里面的变量名，方法函数名等等用更短的名称来替换，并且删除注释（如果有的话）删除代码间的空白及换行所得到的浓缩版本。同时由于代码里面的各种名称都已经被替代，别人无法阅读和分清其逻辑，也起到了混淆代码的作用。</p><p><strong>压缩的好处</strong></p><ul><li>源码经过混淆压缩后，体积大大减小，使代码变得轻量级，同时加快了下载速度，两面加载变快。比如正常jQuery v1.11.0的源码是276kb，而压缩后的版本仅94.1kb！体积减小一半还多。这个体积的减小对于文件下载速度的提升不可小觑。</li><li>经过压缩混淆后，代码还能阅读嘛？当然不能，所以顺带还起到了代码保护的作用。当然只是针对你编写了一些比较酷的代码又不想别人抄袭的情况。对于jQuery社区，这里本身就是开源的世界，同时JavaScript这东西其实也没什么实质性方法可以防止别人查看阅读你的代码，毕竟有混淆就有反混淆工具，这里代码压缩更多的还是上面提到的压缩文件的作用，同时一定程度上防止别人抄袭。</li></ul><p><strong>工具</strong><br>所使用的工具推崇的是Google开发的Closure Compiler。该工具需要Java环境的支持，所以使用前你可能需要先在机子上装JRE, 然后再获取Closure进行使用。<br>同时也有很朋在线的代码混淆压缩工具，用起来也很方便。这些工具都是一搜一大把的。</p><h2 id="6-插件发布"><a href="#6-插件发布" class="headerlink" title="6. 插件发布"></a>6. 插件发布</h2><p>这一步不是必需的，但本着把事情做完整的态度，同时你也许也希望有更多人看到或使用你的插件吧。</p><ul><li>首先你需要将插件代码放到GitHub上创建一个Service Hook，这样做的目的是你以后更新的插件后，jQuery可以自动去获取新版本的信息然后展示在插件中心的页面上。关于如何传代码到GitHub，你去下载GitHub 提供的客户端工具，就会知道如何操作了，非常方便。关于在GitHub创建Service Hook，也只是点几下而以的事情。下面会截图介绍。</li><li><p>然后需要制作一个JSON格式的清单文件，其中包括关于插件的基本信息，具体格式及参数可以在jQuery官网插件发布指南页面了解到，这里提供一个示例文件，是我之前写的一个jQuery插件SlipHover：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"sliphover"</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"SlipHover"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Apply direction aware  2D/3D hover effect to images"</span>,</span><br><span class="line">    <span class="string">"keywords"</span>: [</span><br><span class="line">        <span class="string">"direction-aware"</span>,</span><br><span class="line">        <span class="string">"animation"</span>,</span><br><span class="line">        <span class="string">"effect"</span>,</span><br><span class="line">        <span class="string">"hover"</span>,</span><br><span class="line">        <span class="string">"image"</span>,</span><br><span class="line">        <span class="string">"overlay"</span>,</span><br><span class="line">        <span class="string">"gallery"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.1.1"</span>,</span><br><span class="line">    <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Wayou"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"liuwayong@gmail.com"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://github.com/Wayou"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"maintainers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="string">"name"</span>: <span class="string">"Wayou"</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"liuwayong@gmail.com"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"https://github.com/Wayou"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"licenses"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"https://github.com/jquery/jquery-color/blob/2.1.2/MIT-LICENSE.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"bugs"</span>: <span class="string">"https://github.com/Wayou/sliphover/issues"</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"http://wayou.github.io/SlipHover/"</span>,</span><br><span class="line">    <span class="string">"docs"</span>: <span class="string">"http://wayou.github.io/SlipHover/"</span>,</span><br><span class="line">    <span class="string">"demo"</span>:<span class="string">"http://wayou.github.io/SlipHover/"</span>,</span><br><span class="line">    <span class="string">"download"</span>: <span class="string">"https://github.com/Wayou/SlipHover/zipball/master"</span>,</span><br><span class="line">    <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"jquery"</span>: <span class="string">"&gt;=1.5"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后就可以在插件的根目录执行现行git代码来发布插件了。其中0.1.0是版本号，以后每次你的插件有新版本发布只需更新上面命令中的版本，创建新的tag，这样jQuery插件中心就会自动获取到新版本信息了<br>\$ git tag 0.1.0<br>\$ git push origin –tags</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-jQuery-插件命名规范&quot;&gt;&lt;a href=&quot;#1-jQuery-插件命名规范&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery 插件命名规范&quot;&gt;&lt;/a&gt;1. jQuery 插件命名规范&lt;/h2&gt;&lt;p&gt;通常jQuery采用jquery
      
    
    </summary>
    
      <category term="03-develop" scheme="http://lzuliuyun.com/categories/03-develop/"/>
    
    
      <category term="jquery" scheme="http://lzuliuyun.com/tags/jquery/"/>
    
      <category term="插件" scheme="http://lzuliuyun.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建个人博客</title>
    <link href="http://lzuliuyun.com/2018/06/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lzuliuyun.com/2018/06/20/从零开始搭建个人博客/</id>
    <published>2018-06-20T02:30:24.000Z</published>
    <updated>2018-07-10T13:10:59.849Z</updated>
    
    <content type="html"><![CDATA[<p>##1、购买域名##<br>域名就是网站访问的地址，比如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>。事实上，浏览器输入域名的时候，域名服务器会解析绑定的服务器ip地址，访问请求的资源，因此你可以理解域名是服务器ip的别名。建站第一步，你需要购买一个个性的域名作为访问你个人博客的入口。</p><blockquote><p>域名商 <a href="http://www.godaddy.com" target="_blank" rel="noopener">Godaddy</a> 网站，口碑和价格都不错;<br>域名商 <a href="https://domains.dnspod.cn" target="_blank" rel="noopener">DNSPod</a> 提供的服务和价格也可以;</p></blockquote><p>好了，假如你已经购买了域名，地址为 <code>lzuliuyun.com</code>，你也打开控制台，查看服务可以查看DNS服务配置。</p><p>##2、购买主机##<br>国内提供云服务的厂商很多，根据自己的需要可以购买相应的服务；如果是中小型企业建站，推荐阿里云、腾讯云，毕竟大厂的服务安全、可靠些，但如果是个人博客，访问量不很多，使用虚拟主机和VPS就够用了。</p><blockquote><p><a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云服务器购买主页</a><br><a href="https://www.qcloud.com/" target="_blank" rel="noopener">腾讯云服务器购买主页</a>: 用过一个月，linux命令行是一个门槛，虽然有镜像快速安装部署，但是感觉还是力不从心；建议熟悉的人购买；<br><a href="http://hostpark.cn" target="_blank" rel="noopener">主机公园虚拟主机购买主页</a>: 价格相对实惠，技术支持服务不错；对于wordpress，mysql等天然支持，使用的是cPanel控制面板； 另外有主页相关的教程，建站方便；</p></blockquote><p>##2、搭建博客##</p><h3 id="2-1安装博客程序"><a href="#2-1安装博客程序" class="headerlink" title="2.1安装博客程序"></a>2.1安装博客程序</h3><p>如果你使用阿里云或者腾讯云，会有包含wordpress的镜像模板直接创建；如果使用主机公园服务，步骤如下：</p><p>1)、建立mySQL数据库和用户，并授权；<br>2)、下载wordpress安装程序，并上传到虚拟主机，解压到public_html根目录；<br>具体的操作步骤详见 <a href="http://www.zhangchaoquan.com/index.php/wordpress/106.html" target="_blank" rel="noopener">张朝权博客–建站</a></p><p>###2.2绑定域名###<br>打开域名网站的控制面板，找到DNS服务，增加@和www规则，设置连接为虚拟主机ip（购买主机后，一般发邮件告知，检查邮件）；设置如图。这样我们就将域名和ip做了一个映射。</p><p>###2.3初始化博客###<br>输入地址 http://<strong>[你的域名]</strong>/wp-admin，打开初始化博客页面，根据提示直到最后一步；</p><p>##3、博客优化##<br>到第二步结束，博客已经完全建立好了，但并不是一个很好的网站。好比你刚建立了一栋房子，你还需要装修，让他变得更漂亮，访问更快速，对搜索引擎友好，容易被其他人访问到。</p><p>###3.1主题###<br>选择自己合适的博客主题安装，可以设置一些图片，主题CSS样式等等；</p><p>###3.2必备插件###</p><blockquote><ul><li><strong>Autoptimize</strong> js、css、html压缩插件，减少请求次数和文件大小</li><li><strong>GZippy</strong> 开启gzip压缩，提高访问速度</li><li><strong>WP Super Cache</strong> 自动生成缓存文件，提高访问速度</li><li><strong>WP-DuoShuo-Gravatar</strong> 谷歌被墙，解决在国内(中国大陆), Gravatar 头像无法稳定访问的原因</li><li><strong>Disable Google Fonts</strong> 谷歌被墙，解决在谷歌字体不能使用问题</li><li><strong>多合一SEO包</strong> 提高被搜索引擎引用率</li></ul></blockquote><p>###3.3CDN加速###<br>国内的CDN加速服务需要备案，如果你有备案，可以免费试用腾讯，百度，七牛云等CDN服务</p><p><strong>相关辅助网站</strong></p><blockquote><p><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">检查域名解析是否到服务器IP</a><br><a href="http://www.17ce.com/" target="_blank" rel="noopener">网站测速-17CE</a><br><a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">网站测速-360奇云测</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1、购买域名##&lt;br&gt;域名就是网站访问的地址，比如&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.baidu.com&lt;/a&gt;。事实上，浏览器输入域名的时候，域名服务器会解析绑定的服务器
      
    
    </summary>
    
      <category term="03-develop" scheme="http://lzuliuyun.com/categories/03-develop/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js的mysql 增删改查</title>
    <link href="http://lzuliuyun.com/2018/06/20/Node.js%E7%9A%84mySQL%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://lzuliuyun.com/2018/06/20/Node.js的mySQL 增删改查/</id>
    <published>2018-06-20T02:29:17.000Z</published>
    <updated>2018-07-10T13:08:46.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置环境"><a href="#1、配置环境" class="headerlink" title="1、配置环境"></a>1、配置环境</h2><h3 id="1-1安装Node-js"><a href="#1-1安装Node-js" class="headerlink" title="1.1安装Node.js"></a>1.1安装Node.js</h3><p>安装Node.js很简单，访问<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官方网站</a>下载合适的版本即可，完成安装后，使用cmd或者bash通过命令<code>node -v</code> <code>npm -v</code>查看版本号，检查安装是否成功。</p><p>node-mysql-2</p><p>推荐安装长期支持版本V4.5.0LTS。</p><p>node-mysql-1</p><p>最新的稳定长期支持版本为4.5.0，npm版本为2.15.9</p><h3 id="1-2安装mysql"><a href="#1-2安装mysql" class="headerlink" title="1.2安装mysql"></a>1.2安装mysql</h3><p>打开命令窗口，输入<code>npm install mysql</code>命令，安装mysql模块。</p><h2 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h2><h3 id="2-1Query-查询"><a href="#2-1Query-查询" class="headerlink" title="2.1Query 查询"></a>2.1Query 查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立mysql连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">host:<span class="string">'localhost'</span>,</span><br><span class="line">user:<span class="string">'root'</span>,</span><br><span class="line">password:<span class="string">'mysql'</span>,</span><br><span class="line">database:<span class="string">'wp'</span></span><br><span class="line">&#125;)</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//sql查询</span></span><br><span class="line"><span class="keyword">var</span> sql =<span class="string">'SELECT * FROM article'</span>;</span><br><span class="line">connection.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,rows,fields</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(fields);</span><br><span class="line">rows.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> rowContent = <span class="string">""</span>;</span><br><span class="line">fields.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">field</span>)</span>&#123;</span><br><span class="line">rowContent += rowContent + field.name + <span class="string">"="</span>+ item[field.name] + <span class="string">" "</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rowContent + <span class="string">"\n"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p>表内容</p><p>node-mysql-3</p><p>查询记录</p><p>node-mysql-query-result</p><h3 id="2-2Insert-增加"><a href="#2-2Insert-增加" class="headerlink" title="2.2Insert 增加"></a>2.2Insert 增加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//sql增加</span></span><br><span class="line"><span class="keyword">var</span> sql =<span class="string">'INSERT INTO article(title,author,description) VALUES ("Node.js的mySQL 增删改查","lzu","介绍node.js的mysql数据库操作")'</span>;</span><br><span class="line">connection.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result'</span>,result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>增加成功</p><p>node-mysql-5 node-mysql-delete-8</p><h3 id="2-3Update-更新"><a href="#2-3Update-更新" class="headerlink" title="2.3Update 更新"></a>2.3Update 更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//sql 更新</span></span><br><span class="line"><span class="keyword">var</span> sql =<span class="string">"UPDATE article SET author = "</span>lzuliuyun<span class="string">" WHERE id =6"</span>;</span><br><span class="line">connection.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result'</span>,result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更新成功</p><p>node-mysql-update-6</p><p>node-mysql-update-7</p><h3 id="2-4Delete-删除"><a href="#2-4Delete-删除" class="headerlink" title="2.4Delete 删除"></a>2.4Delete 删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//sql删除</span></span><br><span class="line"><span class="keyword">var</span> sql =<span class="string">'DELETE FROM article WHERE id =6'</span>;</span><br><span class="line">connection.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result'</span>,result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除成功！</p><p>node-mysql-5</p><h2 id="3、进阶用法"><a href="#3、进阶用法" class="headerlink" title="3、进阶用法"></a>3、进阶用法</h2><h3 id="sql预处理"><a href="#sql预处理" class="headerlink" title="sql预处理"></a>sql预处理</h3><p>sql预处理的作用是防止sql注入。<br>mysql的<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">官方网站</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql  = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立mysql连接</span></span><br><span class="line"><span class="keyword">var</span> connection  = mysql.createConnection(</span><br><span class="line">&#123;    <span class="attr">host</span>:<span class="string">'localhost'</span>,</span><br><span class="line">    user:<span class="string">'root'</span>,</span><br><span class="line">    password:<span class="string">'mysql'</span>,</span><br><span class="line">    database:<span class="string">'wp'</span></span><br><span class="line">&#125;)</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// //sql增加</span></span><br><span class="line"><span class="comment">// var sql ='INSERT INTO article(title,author,description) VALUES ("Node.js的mySQL 增删改查","lzu","介绍node.js的mysql数据库操作")';</span></span><br><span class="line"><span class="comment">//     connection.query(sql,function(err,result)&#123;</span></span><br><span class="line"><span class="comment">//     if(err) throw err;</span></span><br><span class="line"><span class="comment">//     console.log('result',result);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> papers = [<span class="string">"Node.js的mySQL 增删改查2"</span>,<span class="string">"lzu2"</span>,<span class="string">"介绍node.js的mysql数据库操作"</span>];</span><br><span class="line"><span class="comment">//sql增加</span></span><br><span class="line"><span class="keyword">var</span> sql =<span class="string">'INSERT INTO article(title,author,description) VALUES (?,?,?)'</span>;</span><br><span class="line">    connection.query(sql,papers,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'result'</span>,result);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="结束连接"><a href="#结束连接" class="headerlink" title="结束连接"></a>结束连接</h3><p>一般使用资源结束后，要关闭释放资源。也就是说一开始我们通过connection.connect()连接，使用完毕后，通过connection.end()方法关闭资源。实际上结束连接有两种方法end()、destory()。</p><p><strong>end()</strong><br>　　end()方法在query都结束后执行，end()方法接收一个回调函数，query，仍然后结束连接，错误会返回给回调函数err参数，可以在回调函数中处理！</p><p><strong>destory()</strong><br>　　比较暴力，没有回调函数，即刻执行，不管query是否完成,也不会触发事件和回调函数。</p><blockquote><p>参考链接<br><a href="http://www.techug.com/node-mysql-node-js" target="_blank" rel="noopener">Node-MySQL：如何在node.js里连接和使用mysql</a><br><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">nodejs mysql github</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、配置环境&quot;&gt;&lt;a href=&quot;#1、配置环境&quot; class=&quot;headerlink&quot; title=&quot;1、配置环境&quot;&gt;&lt;/a&gt;1、配置环境&lt;/h2&gt;&lt;h3 id=&quot;1-1安装Node-js&quot;&gt;&lt;a href=&quot;#1-1安装Node-js&quot; class=&quot;head
      
    
    </summary>
    
      <category term="04-backend" scheme="http://lzuliuyun.com/categories/04-backend/"/>
    
    
      <category term="nodejs" scheme="http://lzuliuyun.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>NPM发布模块</title>
    <link href="http://lzuliuyun.com/2018/04/15/NPM%E5%8F%91%E5%B8%83%E6%A8%A1%E5%9D%97/"/>
    <id>http://lzuliuyun.com/2018/04/15/NPM发布模块/</id>
    <published>2018-04-15T14:42:56.000Z</published>
    <updated>2018-07-10T13:10:38.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加用户并登陆npm"><a href="#添加用户并登陆npm" class="headerlink" title="添加用户并登陆npm"></a>添加用户并登陆npm</h3><p>首先假设你已经有了自己的一个npm模块，相关的功能都已经准备好，只待发布。</p><p>如果你是第一次发布包，则需要首先在官网注册一个npm账号，地址：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> ，<br>然后在终端输入<code>npm adduser</code>根据提示输入账号密码以及邮箱进行登陆。</p><p>需要注意的是，如果你使用了淘宝源，此时你可能需要vpn，使用npm的源。设置步骤是进入<code>C:\Users\user\.npmrc</code>目录，注释掉淘宝源设置，然后开启vpn。<br><img src="http://p66xl7flj.bkt.clouddn.com/images/9ed15303-963d-45dc-a9c1-a401faaabc3f.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><p>如果你不是第一次登陆，那么需要执行命令<code>npm login</code>输入账号密码登陆<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS E:\01 Personal Doc\10 Blog\01 hexo-blog-plugins\hexo-image-cdn&gt; npm login</span><br><span class="line">Username: lzuliuyun</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) lzuliuyun@gmail.com</span><br><span class="line">Logged in as lzuliuyun on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure></p><h3 id="生成版本号并提交到git"><a href="#生成版本号并提交到git" class="headerlink" title="生成版本号并提交到git"></a>生成版本号并提交到git</h3><p>执行命令<code>git version &lt;update_type&gt;</code>自动改变版本, 其中update_type为patch, minor或者 major其中之一，分别表示补丁，小改，大改。</p><p>生成版本号之后，提交推送代码到github。</p><h3 id="‪npm模块发布"><a href="#‪npm模块发布" class="headerlink" title="‪npm模块发布"></a>‪npm模块发布</h3><p>最后执行命令<code>npm publish</code>发布模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS E:\01 Personal Doc\10 Blog\01 hexo-blog-plugins\hexo-image-cdn&gt; npm publish</span><br><span class="line">npm notice</span><br><span class="line">npm notice package: hexo-image-cdn@0.2.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 692B   package.json</span><br><span class="line">npm notice 1.0kB  index.js</span><br><span class="line">npm notice 1.1kB  LICENSE</span><br><span class="line">npm notice 2.2kB  README.md</span><br><span class="line">npm notice 44.6kB images/desc1.png</span><br><span class="line">npm notice 58.1kB images/eaf62561-250b-4219-a11c-c3cf8b0eb11b.png</span><br><span class="line">npm notice 3.5kB  lib/deployer.js</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          hexo-image-cdn</span><br><span class="line">npm notice version:       0.2.0</span><br><span class="line">npm notice package size:  102.3 kB</span><br><span class="line">npm notice unpacked size: 111.2 kB</span><br><span class="line">npm notice shasum:        fee5202128f62018081d4043366d8fd8f09267f0</span><br><span class="line">npm notice integrity:     sha512-ZdM/9j00XDN6q[...]RqYwbrqLKtkEQ==</span><br><span class="line">npm notice total files:   7</span><br><span class="line">npm notice</span><br></pre></td></tr></table></figure><h3 id="修改源为淘宝"><a href="#修改源为淘宝" class="headerlink" title="修改源为淘宝"></a>修改源为淘宝</h3><p>最后修改node配置文件的源为淘宝，并注释掉registry.npmjs.org,下次发布npm包时，则仍需要重新登陆。</p><h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>Q: <img src="http://p66xl7flj.bkt.clouddn.com/images/d35b6e44-5b9f-4e40-b533-5367bba637e4.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""><br>A：该问题是因为没有npm login，重新登陆即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加用户并登陆npm&quot;&gt;&lt;a href=&quot;#添加用户并登陆npm&quot; class=&quot;headerlink&quot; title=&quot;添加用户并登陆npm&quot;&gt;&lt;/a&gt;添加用户并登陆npm&lt;/h3&gt;&lt;p&gt;首先假设你已经有了自己的一个npm模块，相关的功能都已经准备好，只待发布。&lt;
      
    
    </summary>
    
      <category term="08-tool" scheme="http://lzuliuyun.com/categories/08-tool/"/>
    
    
      <category term="npm" scheme="http://lzuliuyun.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装与连接</title>
    <link href="http://lzuliuyun.com/2018/04/11/MongoDB%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%9E%E6%8E%A5/"/>
    <id>http://lzuliuyun.com/2018/04/11/MongoDB安装与连接/</id>
    <published>2018-04-11T13:51:54.000Z</published>
    <updated>2018-07-10T13:10:14.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先去<a href="https://www.mongodb.com/download-center?jmp=tutorials#community" title="mongodb官网" target="_blank" rel="noopener">Mongodb官网</a> 下载社区版本。当时没注意选择第二个Communtiy Server，真的是为自己的智商捉急。中间点击下载时，半天没反映，能否下载看人品了。<br><img src="http://p66xl7flj.bkt.clouddn.com/images/bddd8797-36d6-446b-9301-5ef38110888a.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载之后，直接双击安装即可。其中，安装选项为Custom，左下角的compass不勾选。其余的默认就好。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在bin同级目录依次创建\data\db文件夹，执行下面的命令初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe"</span> --dbpath <span class="string">"C:\Program Files\MongoDB\Server\3.6\data\db"</span></span><br></pre></td></tr></table></figure></p><p>出现如下提示，说明启动OK<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] waiting <span class="keyword">for</span> connections on port <span class="number">27017</span></span><br></pre></td></tr></table></figure></p><p>最后关闭cmd界面（不关闭可能导致出现FQA的第二个问题）。</p><h3 id="安装MongoDB服务"><a href="#安装MongoDB服务" class="headerlink" title="安装MongoDB服务"></a>安装MongoDB服务</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>在bin同级目录，创建mongod.cfg配置文件。另外，在data目录创建log\mongod.log文件夹和文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: C:\Program Files\MongoDB\Server\<span class="number">3.6</span>\data\log\mongod.log</span><br><span class="line">storage:</span><br><span class="line">    dbPath: C:\Program Files\MongoDB\Server\<span class="number">3.6</span>\data\db</span><br></pre></td></tr></table></figure></p><h4 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe"</span> --config <span class="string">"C:\Program Files\MongoDB\Server\3.6\mongod.cfg"</span> --install</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ol><li><p>通过进入bin目录，执行mongo观察是否安装成功<br><img src="http://p66xl7flj.bkt.clouddn.com/images/b6dc407a-a04f-40f6-aeb1-97464818ef64.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li><p>通过GUI工具连接观察是否安装成功<br><img src="http://p66xl7flj.bkt.clouddn.com/images/8b934b29-71f3-46de-b649-917b9fdd64a3.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""><br><img src="http://p66xl7flj.bkt.clouddn.com/images/491d8c95-3c38-46ad-957b-f4e3b5444518.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li></ol><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop MongoDB</span><br></pre></td></tr></table></figure><h3 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h3><ol><li><strong>官方安装帮助文档</strong> <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</a></li><li><strong> 安装过程出现Windows不能在本地计算机启动MongoDB，服务错误代码 100问题 </strong> <a href="https://blog.csdn.net/qq_30100043/article/details/77940573" target="_blank" rel="noopener">https://blog.csdn.net/qq_30100043/article/details/77940573</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;首先去&lt;a href=&quot;https://www.mongodb.com/download-center?jmp=tutorials#comm
      
    
    </summary>
    
      <category term="05-database" scheme="http://lzuliuyun.com/categories/05-database/"/>
    
    
      <category term="mongodb" scheme="http://lzuliuyun.com/tags/mongodb/"/>
    
      <category term="数据库" scheme="http://lzuliuyun.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>为知笔记--导出MarkDown文件插件</title>
    <link href="http://lzuliuyun.com/2016/09/25/%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0--%E5%AF%BC%E5%87%BAMarkDown%E6%96%87%E4%BB%B6%E6%8F%92%E4%BB%B6/"/>
    <id>http://lzuliuyun.com/2016/09/25/为知笔记--导出MarkDown文件插件/</id>
    <published>2016-09-25T12:49:02.000Z</published>
    <updated>2018-07-18T11:40:02.150Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub地址: <a href="https://github.com/lzuliuyun/ExportToMd" target="_blank" rel="noopener">https://github.com/lzuliuyun/ExportToMd</a></p><p>为知笔记导出MarkDown插件，只支持MarkDown格式文档导出。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>1.克隆项目到本地</li><li><p>2.复制ExportToMd文件夹到数据<code>存储目录</code>下的Plugins目录中<br><img src="http://p66xl7flj.bkt.clouddn.com/images/afc9fcec-4ca7-4913-8cd9-180d8a3f838b.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""><br><img src="http://p66xl7flj.bkt.clouddn.com/images/3f17a9ea-472a-4e5c-899f-3922030c8cd1.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li><p>3.配置导出的markdown文件和图片目录路径参数<br><img src="http://p66xl7flj.bkt.clouddn.com/images/4e8292e4-634e-47f9-8799-6f65ca12c3ae.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li>4.重新启动程序</li><li>5.导出文档<br><img src="http://p66xl7flj.bkt.clouddn.com/images/936218e6-be30-4371-82f9-5d614e07785d.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>[2018-07-10]</p><ul><li>新增配置项showRootDir导出标签categories是否为文件路径根目录</li><li>维持原生语法<code></code>前后包裹语法导出配置到头部<br><img src="http://p66xl7flj.bkt.clouddn.com/images/9856c240-8390-4979-b52b-f9ea33a533f4.jpg?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></li></ul><p>[2017-03-19]</p><ul><li>更新支持为知笔记4.5以上版本</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitHub地址: &lt;a href=&quot;https://github.com/lzuliuyun/ExportToMd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lzuliuyun/ExportToMd&lt;/a&gt;&lt;/p
      
    
    </summary>
    
      <category term="08-tool" scheme="http://lzuliuyun.com/categories/08-tool/"/>
    
    
      <category term="markdown" scheme="http://lzuliuyun.com/tags/markdown/"/>
    
      <category term="为知笔记" scheme="http://lzuliuyun.com/tags/%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一小时快速搭建Hexo博客站点</title>
    <link href="http://lzuliuyun.com/2016/09/25/%E4%B8%80%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/"/>
    <id>http://lzuliuyun.com/2016/09/25/一小时快速搭建Hexo博客站点/</id>
    <published>2016-09-25T07:42:14.000Z</published>
    <updated>2018-07-18T11:42:01.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一站-博客园"><a href="#第一站-博客园" class="headerlink" title="第一站-博客园"></a>第一站-博客园</h3><p>博客园是一个很好的IT同行交流平台，发篇文章基本能得到较高的阅读量，在这里你可以膜拜大神们的牛文，与其他同行热烈的讨论。但是作为完美主义者的我，不能忍受写博客的写作干扰，比如图片上传来回操作就让我很死心，导致我本来想好好的写文章，结果却写不下去，完全享受不到写作的快感。后来，我有尝试使用专门的博客工具Windows Live Writer，写作的感觉慢慢上去，但是样式排版却让我吐槽。</p><p>PS: CSDN没怎么写过博客，缘由不喜欢博客的风格样式。<br>PS: 虽然现在博客园已经支持markdown语法，但是我仍然没有太大的兴趣。后面研究下博客同步的工具。</p><h3 id="第二站-WordPress"><a href="#第二站-WordPress" class="headerlink" title="第二站-WordPress"></a>第二站-WordPress</h3><p>由于使用已有的博客站点写博客并不能显示出逼格，更重要的是不能显示自己的风格，所以我抛弃了已有的博客站点，准备自己搭建博客站点。自己动手丰衣足食嘛，于是自己掏钱买虚拟主机呀，研究网站各种加速的优化技巧，最终像模像样的搭建出了自己喜欢的风格。</p><p>wordpress的优点在于各种各种的插件解决你所有的从写文章到网站速度优化以及SEO的需求，的确刚开始建立的时候，我以为幸福的日子就要降临了，以后就开开心心的和wordpress过两人世界，结果这货支持markdown的语法就是不方便。前前后后研究了好长一段时间，终于调教的像个样子了，其中建站前后的博文，请访问<a href="http://www.lzuliuyun.com/2016/08/03/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">从零开始搭建个人博客</a>, 但代码的缩进风格简直让我抓狂。于是作为完美主义者，我被迫一次抛弃wordpress。</p><p>不过这次从零开始搭建博客，让我了解到关于网站的一些知识，比如插件，GIZp压缩，SEO，缓存，cPanel等等一些知识，算是没有浪费我建站的钱，哎，还是有些肉疼。</p><h3 id="第三站-选择Hexo"><a href="#第三站-选择Hexo" class="headerlink" title="第三站-选择Hexo"></a>第三站-选择Hexo</h3><p>到这里的时候，我选择博客站点的原则是，不支持markdown语法的不是好博客站点。原因很简单，首先markdown很流行，简洁的语法可以让你写出排版漂亮的博客文章，其次你完全可以不用费心去设置文本格式，完全是沉浸式文字书写，尽情享受写作表达的快感。在经过若干次的尝试之后，我选择了Hexo。</p><p>Hexo的优点是：</p><ol><li>完美支持markdown</li><li>搭建简单方便</li><li>完美支持GitHub Page,可以同步到GitHub,免费使用github.io的域名</li><li>完美的持久化本地保存同步，文章不会丢失</li><li>丰富的主题素材和可定制修改的主题</li><li>可定制的修改的网站模板</li><li>发布博客非常方便</li><li>可以用各种工具写markdown文章</li><li>博客文章是静态的，访问速度快</li><li>……</li></ol><p>这些优点让我毫不犹豫的投入Hexo的怀抱，不，这是一见钟情的感觉。</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>写博客不仅仅是秀出自己的牛逼，更重要的是自己平常所学、所惑的总结，它能够体现一个人的技能水准和素质修养。这些重要的信息你需要好好保存，必要的时候，你可以搜索，可以时常更新总结。简而言之，博客应该当成你个人信息知识库的一个向外展示的资源媒介，所以到这里就牵涉到个人信息资源库的同步。如果你是OneNote、EverNote的用户，你就知道个人信息知识库的搭建是多么重要。</p><p>EverNote是我个人主力的信息知识库，但是却不支持markdown语法，让我很受伤。于是有尝试过cmd markdown工具，这款工具的确很方便，就是图片的保存和发布非常麻烦。最后，于千万款工具之中，我找到了为知笔记，简直是锦上添花的感觉，完美主义的病也都治好了。</p><p>为知笔记是国产和EverNote同类型的知识类管理工具，EverNote有的为知笔记也基本都有。为知笔记的优点是支持markdown的语法，而且更重要的是支持插件开发。到此，Hexo和为止笔记解决了我所有写博客的需求：</p><ol><li>支持markdown</li><li>方便保存同步迁移，建立自己的信息库</li><li>可定制的网站主题和样式</li></ol><p>so, Let’s get start…</p><h2 id="安装使用Hexo"><a href="#安装使用Hexo" class="headerlink" title="安装使用Hexo"></a>安装使用Hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>首先你需要安装node环境和git环境，通过下面的命令，安装Hexo,参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> $ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h3><ul><li>执行以下步骤，初始化一个博客文件夹，cd进入该文件夹，然后安装npm。当然如果你对git bash熟悉的话，也可以直接cd 进入文件夹，使用<code>hexo init</code> <code>npm install</code> 进行初始化。具体的文件夹结构说明，请参考<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo-建站</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul><li>使用如下命令启动server,或者简写的方式是<code>hexo s</code>,如果默认端口被占用，可以使用<code>hexo s -p 7777</code>来修改启动的端口。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li>然后在浏览器中输入地址，便可以在本地打开你的博客主页（截图是修改了主题）。到此你基本成功完成建站本地搭建的第一步。<br><img src="http://p66xl7flj.bkt.clouddn.com/images/84ac35cd-71a9-4cb9-8c46-97f153606de6.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></li></ul><h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><ul><li><p>首先你要登陆github页面，新建一个你的仓库，命名规范是yourdomain.github.io,比如我的是lzuliuyun.github.io.<br><img src="http://p66xl7flj.bkt.clouddn.com/images/c3079743-05f4-442c-86a2-202eeb77dc30.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li><p>安装hexo-deployer-git</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li><p>然后修改你的站点配置文件_config.yml的deploy这样,其中repo的参数，是yourdomain.github.io仓库的ssh地址。墙裂注意的是，所有配置文件冒号后面的参数，必须有一个<strong>空格</strong>，否则会出错。所有配置文件冒号后面的参数，必须有一个<strong>空格</strong>，否则会出错。所有配置文件冒号后面的参数，必须有一个<strong>空格</strong>，否则会出错。重要的事情说三遍。<br><img src="http://p66xl7flj.bkt.clouddn.com/images/f3836b95-9b8c-44ce-b60f-104b2c28ac81.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p></li><li><p>清理缓存并更新缓存<br>生成缓存也可以用缩写命令<code>hexo g</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><ul><li>发布到github<br>发布也可以用缩写命令<code>hexo d</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>如果这一步出现权限不够的错误，说明你的ssh有问题。你可以参考<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener">github官方文章</a>解决。</p><p>假如你本地安装了github desktop出现该问题，那么可以参考<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">本地添加ssh的文章</a>执行以下命令即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">$ ssh-add ~<span class="regexp">/.ssh/gi</span>thub_rsa</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="检查发布是否成功"><a href="#检查发布是否成功" class="headerlink" title="检查发布是否成功"></a>检查发布是否成功</h3><p>在浏览器中，输入你建立的仓库命令，比如lzuliuyun.github.io，到此就可以正常将你本地的缓存静态网站数据同步到github中了。<br><img src="http://p66xl7flj.bkt.clouddn.com/images/5f386006-a8a6-4310-abb2-4653b972bee6.jpg?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h2 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h2><p>发布文章有两种方式，一种通过模板和命令生成，一种自己直接复制到<code>source\_posts</code>目录下。模板的方式请参考文档<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">写作</a>,我主要介绍手动写md文档的方法。</p><ul><li>正常方式写完你的markdown文件，文件后缀名为.md</li><li>在文件头添加这些描述信息<br><img src="http://p66xl7flj.bkt.clouddn.com/images/690bfa72-5866-4bfd-b28e-c2425f309ae7.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></li><li>写完之后，复制到<code>source\_posts</code>目录，发布流程参考上一节</li></ul><p>对应的标签体现在网站上面<br><img src="http://p66xl7flj.bkt.clouddn.com/images/aed875df-2b2a-413e-a84b-146915ac3db4.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><p><strong> 图片问题 </strong><br>有的人图片使用外链，当然是极好的。不过我比较喜欢本地保存，使用步骤是</p><ol><li>在source新建img文件夹，图片都放在这个目录</li><li>在markdown写作的时候，使用<code>![](http://p66xl7flj.bkt.clouddn.com/img/f3abaeec-05a9-4b75-ae63-75c97cf0b208.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim)</code>方式引用,当然，你可以类比自己定义</li></ol><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>你可以去github搜索 hexo主题，或者去官方网站搜索主题。我比较喜欢这个主题，github地址是<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">https://github.com/tufu9441/maupassant-hexo</a>, 中文教程地址是<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">https://www.haomwei.com/technology/maupassant-hexo.html</a></p><h2 id="为知笔记同步"><a href="#为知笔记同步" class="headerlink" title="为知笔记同步"></a>为知笔记同步</h2><p>经过上面的步骤，你初步完成了一个博客的搭建，完美支持markdown,漂亮的外观，但是你心中唯有一点美中不足的是，我所有的文章都在_post中，万一磁盘挂掉了怎么办，怎么做好备份。当然你可以使用坚果云，同步你的_post文件夹，更好的办法，我推荐使用为知笔记。</p><p>为知笔记对markdown的支持非常好，比如我写作的界面是：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/378ee563-116b-438a-bd83-ac778b4a2d6a.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><p>更为方便的是，我自己写了一个工具，可以将为知笔记的markdown笔记包括图片导出到hexo的对应的目录下，是不是很方便呢。具体的工具github地址是<a href="https://github.com/lzuliuyun/ExportToMd" target="_blank" rel="noopener">https://github.com/lzuliuyun/ExportToMd</a>, 内有详细说明。</p><h2 id="支持域名绑定"><a href="#支持域名绑定" class="headerlink" title="支持域名绑定"></a>支持域名绑定</h2><p>支持域名访问容易让大家记住，对于hexo也非常简单。如果你已经有一个域名，通过以下步骤即可绑定。</p><ul><li>在source目录新建文件CNAME，内容就是要绑定的域名<br><img src="http://p66xl7flj.bkt.clouddn.com/images/d0824591-6237-4842-a82f-fb2b36b6c4f4.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></li><li>可增加一个ico文件，作为网站的标识</li></ul><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p>到此，敬请享受写作，欢迎交流。</p><p><strong>参考资料</strong></p><ul><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一站-博客园&quot;&gt;&lt;a href=&quot;#第一站-博客园&quot; class=&quot;headerlink&quot; title=&quot;第一站-博客园&quot;&gt;&lt;/a&gt;第一站-博客园&lt;/h3&gt;&lt;p&gt;博客园是一个很好的IT同行交流平台，发篇文章基本能得到较高的阅读量，在这里你可以膜拜大神们的牛文，与
      
    
    </summary>
    
      <category term="08-tool" scheme="http://lzuliuyun.com/categories/08-tool/"/>
    
    
      <category term="markdown" scheme="http://lzuliuyun.com/tags/markdown/"/>
    
      <category term="为知笔记" scheme="http://lzuliuyun.com/tags/%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://lzuliuyun.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>花式居中，你知道哪几种</title>
    <link href="http://lzuliuyun.com/2016/09/19/%E8%8A%B1%E5%BC%8F%E5%B1%85%E4%B8%AD%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E5%87%A0%E7%A7%8D/"/>
    <id>http://lzuliuyun.com/2016/09/19/花式居中，你知道哪几种/</id>
    <published>2016-09-19T11:21:15.000Z</published>
    <updated>2018-07-10T12:52:32.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p>水平居中最常见的例子是使用margin:0 auto，参数的意思是上下margin为0，左右边距为自动平均分配。</p><p>关键知识点：</p><ol><li><code>margin属性</code> 0 auto</li></ol><p>适用场景：</p><ol><li></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            margin: 0 auto; /</span>*关键代码*<span class="regexp">/ </span></span><br><span class="line"><span class="regexp">            /</span>*margin-left: auto;</span><br><span class="line">            margin-right: auto;*<span class="regexp">/ /</span>*或者这个*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="child"&gt;水平居中&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/f3abaeec-05a9-4b75-ae63-75c97cf0b208.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>关键知识点：</p><ol><li>定位布局方式 <code>父元素relative</code> <code>子元素absolute</code></li><li>偏移方式： 在<code>绝对布局absolute</code>下，使用<code>top:50</code>%，<code>marign该元素的一半补偿</code></li></ol><p>适用场景</p><ol><li>知道子元素的高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        #parent &#123;</span></span><br><span class="line"><span class="regexp">            position: relative; /</span>*确保子元素是在父元素内部 子元素相对父元素*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            width: 100%;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            position: absolute; /</span>*使用绝对定位*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            top: 50%;</span></span><br><span class="line"><span class="regexp">            margin-top: -100px;</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="parent"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="child"&gt;垂直居中&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/2f5103e6-6177-4667-ab70-f86766e74205.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>关键知识点：</p><ol><li>利用绝对布局 top:0，bottom：0两边拉伸，再使用auto平分上下剩余空间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        #parent &#123;</span></span><br><span class="line"><span class="regexp">            position: relative;</span></span><br><span class="line"><span class="regexp">            width: 200px;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            top: 0;</span></span><br><span class="line"><span class="regexp">            bottom: 0;</span></span><br><span class="line"><span class="regexp">            left: 0;</span></span><br><span class="line"><span class="regexp">            right: 0;</span></span><br><span class="line"><span class="regexp">            margin: auto;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="parent"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="child"&gt;自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/11cc87a1-6ad1-4b5a-833a-e900c797b3ea.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="方法三-–-自适应"><a href="#方法三-–-自适应" class="headerlink" title="方法三 – 自适应"></a>方法三 – 自适应</h3><p>假如子元素不知道宽高，也就是子自适应水平居中怎么办？</p><p>关键知识点：</p><ol><li>父元素使用table布局<code>display:table</code></li><li>子元素用<code>display：table-cell</code>，然后使用<code>vertical-align: middle;</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        #parent &#123;</span></span><br><span class="line"><span class="regexp">            display: table;</span></span><br><span class="line"><span class="regexp">            width: 200px;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            display: table-cell;</span></span><br><span class="line"><span class="regexp">            vertical-align: middle;    </span></span><br><span class="line"><span class="regexp">            background-color: red;        </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="parent"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="child"&gt;自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中自适应垂直居中&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://p66xl7flj.bkt.clouddn.com/images/0bd4ccce-c587-420c-83f2-a65f90dfc7a6.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h2 id="水平垂直二合一"><a href="#水平垂直二合一" class="headerlink" title="水平垂直二合一"></a>水平垂直二合一</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>关键知识点：</p><ol><li>定位布局方式 <code>父元素relative</code> <code>子元素absolute</code></li><li>偏移方式： 在<code>绝对布局absolute</code>下，水平垂直使用<code>top:50%</code>或<code>left:50%</code>，<code>marign该元素水平垂直的一半补偿</code></li></ol><p>适用场景</p><ol><li>知道子元素的高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        #parent &#123;</span></span><br><span class="line"><span class="regexp">            position: relative; /</span>*确保子元素是在父元素内部 子元素相对父元素*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            width: 100%;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            position: absolute; /</span>*使用绝对定位*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            top: 50%;  </span></span><br><span class="line"><span class="regexp">            left: 50%;</span></span><br><span class="line"><span class="regexp">            margin-left: -50px;/</span>*使用margin补偿间距*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            margin-top: -100px;    /</span>*使用margin补偿间距*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="parent"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="child"&gt;水平垂直居中&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p> 结果：</p><p> <img src="http://p66xl7flj.bkt.clouddn.com/images/260739cf-bca8-4240-be84-c230a0d21f17.png?imageView2/0/q/75|watermark/1/image/aHR0cDovL3A2NnhsN2Zsai5ia3QuY2xvdWRkbi5jb20vbG9nby5wbmc=/dissolve/62/gravity/SouthEast/dx/20/dy/10|imageslim" alt=""></p><h3 id="方法二-–自适应"><a href="#方法二-–自适应" class="headerlink" title="方法二 –自适应"></a>方法二 –自适应</h3><p>关键知识点：<br>同方法一，只是补偿的时候，用transform: translate(-50%,-50%);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;horizontal&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        #parent &#123;</span></span><br><span class="line"><span class="regexp">            position: relative; /</span>*确保子元素是在父元素内部 子元素相对父元素*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            width: 100%;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #child&#123;</span></span><br><span class="line"><span class="regexp">            position: absolute; /</span>*使用绝对定位*<span class="regexp">/            </span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            top: 50%;  </span></span><br><span class="line"><span class="regexp">            left: 50%;</span></span><br><span class="line"><span class="regexp">            transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="parent"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="child"&gt;水平垂直居中&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>自适应布局，用百分比，故而一般使用绝对定位，而父元素一般用相对定位；</li><li>布局，首先考虑定位，其次考虑偏移，偏移一般考虑left,top,margin,transform等等属性；</li></ol><blockquote><p>参考<br><a href="https://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/" target="_blank" rel="noopener"># CSS实现垂直居中的5种方法</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h2&gt;&lt;p&gt;水平居中最常见的例子是使用margin:0 auto，参数的意思是上下margin为0，左右边距为自动平均分配。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="01-css" scheme="http://lzuliuyun.com/categories/01-css/"/>
    
    
      <category term="css" scheme="http://lzuliuyun.com/tags/css/"/>
    
      <category term="水平居中" scheme="http://lzuliuyun.com/tags/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
      <category term="垂直居中" scheme="http://lzuliuyun.com/tags/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
</feed>
